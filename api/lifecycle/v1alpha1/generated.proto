// SPDX-FileCopyrightText: 2023 SAP SE or an SAP affiliate company and IronCore contributors
// SPDX-License-Identifier: Apache-2.0
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package github.com.ironcore_dev.lifecycle_manager.api.lifecycle.v1alpha1;

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "github.com/ironcore-dev/lifecycle-manager/api/lifecycle/v1alpha1";

// AvailablePackageVersions defines a number of versions for concrete firmware package.
message AvailablePackageVersions {
  // Name reflects the name of the firmware package
  // +kubebuilder:validation:Required
  optional string name = 1;

  // Versions reflects the list of discovered package versions available for installation.
  // +kubebuilder:validation:Required
  repeated string versions = 2;
}

// Machine is the Schema for the machines API.
message Machine {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional MachineSpec spec = 2;

  optional MachineStatus status = 3;
}

// MachineGroup defines group of Machine objects filtered by label selector
// and a list of firmware packages versions which should be installed by default.
message MachineGroup {
  // MachineSelector defines native kubernetes label selector to apply to Machine objects.
  // +kubebuilder:validation:Required
  optional k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector machineSelector = 1;

  // Packages defines default firmware package versions for the group of Machine objects.
  // +kubebuilder:validation:Required
  repeated PackageVersion packages = 2;
}

// MachineList contains a list of Machine.
message MachineList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Machine items = 2;
}

// MachineSpec defines the desired state of Machine.
message MachineSpec {
  // MachineTypeRef contain reference to MachineType object.
  // +kubebuilder:validation:Required
  optional k8s.io.api.core.v1.LocalObjectReference machineTypeRef = 1;

  // OOBMachineRef contains reference to OOB machine object.
  // +kubebuilder:validation:Required
  optional k8s.io.api.core.v1.LocalObjectReference oobMachineRef = 2;

  // ScanPeriod defines the interval between scans.
  // +kubebuilder:validation:Required
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Duration scanPeriod = 3;

  // Packages defines the list of package versions to install.
  // +kubebuilder:validation:Optional
  repeated PackageVersion packages = 4;
}

// MachineStatus defines the observed state of Machine.
message MachineStatus {
  // LastScanTime reflects the timestamp when the last scan job for installed
  // firmware versions was performed.
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time last_scan_time = 1;

  // LastScanResult reflects either success or failure of the last scan job.
  // +kubebuilder:validation:Optional
  optional string last_scan_result = 2;

  // InstalledPackages reflects the versions of installed firmware packages.
  // +kubebuilder:validation:Optional
  repeated PackageVersion installed_packages = 3;

  // Message contains verbose message explaining current state
  // +kubebuilder:validation:Optional
  optional string message = 4;
}

// MachineType is the Schema for the machinetypes API.
message MachineType {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional MachineTypeSpec spec = 2;

  optional MachineTypeStatus status = 3;
}

// MachineTypeList contains a list of MachineType.
message MachineTypeList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated MachineType items = 2;
}

// MachineTypeSpec defines the desired state of MachineType.
message MachineTypeSpec {
  // Manufacturer refers to manufacturer, e.g. Lenovo, Dell etc.
  // +kubebuilder:validation:Required
  optional string manufacturer = 1;

  // Type refers to machine type, e.g. 7z21 for Lenovo, R440 for Dell etc.
  // +kubebuilder:validation:Required
  optional string type = 2;

  // ScanPeriod defines the interval between scans.
  // +kubebuilder:validation:Required
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Duration scanPeriod = 3;

  // MachineGroups defines list of MachineGroup
  // +kubebuilder:validation:Optional
  repeated MachineGroup machine_groups = 4;
}

// MachineTypeStatus defines the observed state of MachineType.
message MachineTypeStatus {
  // LastScanTime reflects the timestamp when the last scan of available packages was done.
  // +kubebuilder:validation:Optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time last_scan_time = 1;

  // LastScanResult reflects the result of the last scan.
  // +kubebuilder:validation:Optional
  // +kubebuilder:validation:Enum=Success;Failure
  optional string last_scan_result = 2;

  // AvailablePackages reflects the list of AvailablePackageVersion
  // +kubebuilder:validation:Optional
  repeated AvailablePackageVersions available_packages = 3;

  // Message contains verbose message explaining current state
  // +kubebuilder:validation:Optional
  optional string message = 4;
}

// PackageVersion defines the concrete package version item.
message PackageVersion {
  // Name defines the name of the firmware package.
  // +kubebuilder:validation:Required
  optional string name = 1;

  // Version defines the version of the firmware package.
  // +kubebuilder:validation:Required
  optional string version = 2;
}

