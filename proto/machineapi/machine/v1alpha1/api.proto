syntax = "proto3";

package machine.v1alpha1;

import "common/v1alpha1/api.proto";
import "google/api/annotations.proto";
import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";

option go_package = "github.com/ironcore-dev/lifecycle-manager/lcmi/api/machine/v1alpha1";

message MachineSpec {
  k8s.io.api.core.v1.LocalObjectReference machine_type_ref = 1;
  k8s.io.api.core.v1.LocalObjectReference oob_machine_ref = 2;
  k8s.io.apimachinery.pkg.apis.meta.v1.Duration scan_period = 3;
  repeated common.v1alpha1.PackageVersion packages = 4;
}

message MachineStatus {
  k8s.io.apimachinery.pkg.apis.meta.v1.Time last_scan_time = 1;
  common.v1alpha1.ScanResult last_scan_result = 2;
  repeated common.v1alpha1.PackageVersion installed_packages = 3;
  string message = 4;
}

message Machine {
  k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta type_meta = 1;
  k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta object_meta = 2;
  MachineSpec spec = 3;
  MachineStatus status = 4;
}

message ListMachinesRequest {
  common.v1alpha1.Filter filter = 1;
}

message ListMachinesResponse {
  repeated Machine machines = 1;
}

message ScanMachineRequest {
  string name = 1;
  string namespace = 2;
}

message ScanMachineResponse {
  common.v1alpha1.RequestResult result = 1;
  MachineStatus status = 2;
}

message InstallRequest {
  string name = 1;
  string namespace = 2;
  repeated common.v1alpha1.PackageVersion packages = 3;
}

message InstallResponse {
  common.v1alpha1.RequestResult result = 1;
}

message UpdateMachineRequest {
  string name = 1;
  string namespace = 2;
  MachineStatus status = 3;
}

message UpdateMachineResponse {
  common.v1alpha1.RequestResult result = 1;
}

service MachineService {
  rpc ScanMachine(ScanMachineRequest) returns (ScanMachineResponse) {
    option (google.api.http) = {
      post: "/v1alpha1/machines/scan"
      body: "*"
    };
  }
  rpc Install(InstallRequest) returns (InstallResponse) {
    option (google.api.http) = {
      post: "/v1alpha1/machines/install"
      body: "*"
    };
  }
  rpc UpdateMachine(UpdateMachineRequest) returns (UpdateMachineResponse) {
    option (google.api.http) = {
      post: "/v1alpha1/machines/update"
      body: "*"
    };
  }
  rpc ListMachines(ListMachinesRequest) returns (ListMachinesResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/machines/list"
    };
  }
}