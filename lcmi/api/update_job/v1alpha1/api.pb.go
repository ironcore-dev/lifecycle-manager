// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lcmi/api/update_job/v1alpha1/api.proto

package v1alpha1

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	v1alpha11 "github.com/ironcore-dev/lifecycle-manager/lcmi/api/common/v1alpha1"
	v1alpha1 "github.com/ironcore-dev/lifecycle-manager/lcmi/api/meta/v1alpha1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type UpdateJob struct {
	Metadata             *v1alpha1.ObjectMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec                 *UpdateJobSpec           `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	Status               *UpdateJobStatus         `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *UpdateJob) Reset()      { *m = UpdateJob{} }
func (*UpdateJob) ProtoMessage() {}
func (*UpdateJob) Descriptor() ([]byte, []int) {
	return fileDescriptor_055147bed48d7c54, []int{0}
}
func (m *UpdateJob) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateJob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateJob.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateJob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateJob.Merge(m, src)
}
func (m *UpdateJob) XXX_Size() int {
	return m.Size()
}
func (m *UpdateJob) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateJob.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateJob proto.InternalMessageInfo

func (m *UpdateJob) GetMetadata() *v1alpha1.ObjectMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *UpdateJob) GetSpec() *UpdateJobSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *UpdateJob) GetStatus() *UpdateJobStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (*UpdateJob) XXX_MessageName() string {
	return "lcmi.api.update_job.v1alpha1.UpdateJob"
}

type UpdateJobSpec struct {
	MachineLifecycleRef  *v1alpha1.LocalObjectReference `protobuf:"bytes,1,opt,name=machine_lifecycle_ref,json=machineLifecycleRef,proto3" json:"machine_lifecycle_ref,omitempty"`
	FirmwarePackageRef   *v1alpha1.LocalObjectReference `protobuf:"bytes,2,opt,name=firmware_package_ref,json=firmwarePackageRef,proto3" json:"firmware_package_ref,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *UpdateJobSpec) Reset()      { *m = UpdateJobSpec{} }
func (*UpdateJobSpec) ProtoMessage() {}
func (*UpdateJobSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_055147bed48d7c54, []int{1}
}
func (m *UpdateJobSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateJobSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateJobSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateJobSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateJobSpec.Merge(m, src)
}
func (m *UpdateJobSpec) XXX_Size() int {
	return m.Size()
}
func (m *UpdateJobSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateJobSpec.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateJobSpec proto.InternalMessageInfo

func (m *UpdateJobSpec) GetMachineLifecycleRef() *v1alpha1.LocalObjectReference {
	if m != nil {
		return m.MachineLifecycleRef
	}
	return nil
}

func (m *UpdateJobSpec) GetFirmwarePackageRef() *v1alpha1.LocalObjectReference {
	if m != nil {
		return m.FirmwarePackageRef
	}
	return nil
}

func (*UpdateJobSpec) XXX_MessageName() string {
	return "lcmi.api.update_job.v1alpha1.UpdateJobSpec"
}

type UpdateJobStatus struct {
	Conditions           []*v1alpha1.Condition    `protobuf:"bytes,1,rep,name=conditions,proto3" json:"conditions,omitempty"`
	State                v1alpha11.UpdateJobState `protobuf:"varint,2,opt,name=state,proto3,enum=lcmi.api.common.v1alpha1.UpdateJobState" json:"state,omitempty"`
	Message              string                   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *UpdateJobStatus) Reset()      { *m = UpdateJobStatus{} }
func (*UpdateJobStatus) ProtoMessage() {}
func (*UpdateJobStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_055147bed48d7c54, []int{2}
}
func (m *UpdateJobStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateJobStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateJobStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateJobStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateJobStatus.Merge(m, src)
}
func (m *UpdateJobStatus) XXX_Size() int {
	return m.Size()
}
func (m *UpdateJobStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateJobStatus.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateJobStatus proto.InternalMessageInfo

func (m *UpdateJobStatus) GetConditions() []*v1alpha1.Condition {
	if m != nil {
		return m.Conditions
	}
	return nil
}

func (m *UpdateJobStatus) GetState() v1alpha11.UpdateJobState {
	if m != nil {
		return m.State
	}
	return v1alpha11.UpdateJobState_UPDATE_JOB_STATE_UNSPECIFIED
}

func (m *UpdateJobStatus) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (*UpdateJobStatus) XXX_MessageName() string {
	return "lcmi.api.update_job.v1alpha1.UpdateJobStatus"
}

type UpdateJobFilter struct {
	Id                   string                         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	MachineLifecycleRef  *v1alpha1.LocalObjectReference `protobuf:"bytes,2,opt,name=machine_lifecycle_ref,json=machineLifecycleRef,proto3" json:"machine_lifecycle_ref,omitempty"`
	FirmwarePackageRef   *v1alpha1.LocalObjectReference `protobuf:"bytes,3,opt,name=firmware_package_ref,json=firmwarePackageRef,proto3" json:"firmware_package_ref,omitempty"`
	LabelSelector        map[string]string              `protobuf:"bytes,4,rep,name=label_selector,json=labelSelector,proto3" json:"label_selector,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *UpdateJobFilter) Reset()      { *m = UpdateJobFilter{} }
func (*UpdateJobFilter) ProtoMessage() {}
func (*UpdateJobFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_055147bed48d7c54, []int{3}
}
func (m *UpdateJobFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateJobFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateJobFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateJobFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateJobFilter.Merge(m, src)
}
func (m *UpdateJobFilter) XXX_Size() int {
	return m.Size()
}
func (m *UpdateJobFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateJobFilter.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateJobFilter proto.InternalMessageInfo

func (m *UpdateJobFilter) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateJobFilter) GetMachineLifecycleRef() *v1alpha1.LocalObjectReference {
	if m != nil {
		return m.MachineLifecycleRef
	}
	return nil
}

func (m *UpdateJobFilter) GetFirmwarePackageRef() *v1alpha1.LocalObjectReference {
	if m != nil {
		return m.FirmwarePackageRef
	}
	return nil
}

func (m *UpdateJobFilter) GetLabelSelector() map[string]string {
	if m != nil {
		return m.LabelSelector
	}
	return nil
}

func (*UpdateJobFilter) XXX_MessageName() string {
	return "lcmi.api.update_job.v1alpha1.UpdateJobFilter"
}

type ListUpdateJobsRequest struct {
	Filter               *UpdateJobFilter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ListUpdateJobsRequest) Reset()      { *m = ListUpdateJobsRequest{} }
func (*ListUpdateJobsRequest) ProtoMessage() {}
func (*ListUpdateJobsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_055147bed48d7c54, []int{4}
}
func (m *ListUpdateJobsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListUpdateJobsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListUpdateJobsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListUpdateJobsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListUpdateJobsRequest.Merge(m, src)
}
func (m *ListUpdateJobsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListUpdateJobsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListUpdateJobsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListUpdateJobsRequest proto.InternalMessageInfo

func (m *ListUpdateJobsRequest) GetFilter() *UpdateJobFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (*ListUpdateJobsRequest) XXX_MessageName() string {
	return "lcmi.api.update_job.v1alpha1.ListUpdateJobsRequest"
}

type ListUpdateJobsResponse struct {
	UpdateJob            []*UpdateJob `protobuf:"bytes,1,rep,name=update_job,json=updateJob,proto3" json:"update_job,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ListUpdateJobsResponse) Reset()      { *m = ListUpdateJobsResponse{} }
func (*ListUpdateJobsResponse) ProtoMessage() {}
func (*ListUpdateJobsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_055147bed48d7c54, []int{5}
}
func (m *ListUpdateJobsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListUpdateJobsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListUpdateJobsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListUpdateJobsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListUpdateJobsResponse.Merge(m, src)
}
func (m *ListUpdateJobsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListUpdateJobsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListUpdateJobsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListUpdateJobsResponse proto.InternalMessageInfo

func (m *ListUpdateJobsResponse) GetUpdateJob() []*UpdateJob {
	if m != nil {
		return m.UpdateJob
	}
	return nil
}

func (*ListUpdateJobsResponse) XXX_MessageName() string {
	return "lcmi.api.update_job.v1alpha1.ListUpdateJobsResponse"
}

type StatusRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatusRequest) Reset()      { *m = StatusRequest{} }
func (*StatusRequest) ProtoMessage() {}
func (*StatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_055147bed48d7c54, []int{6}
}
func (m *StatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusRequest.Merge(m, src)
}
func (m *StatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *StatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StatusRequest proto.InternalMessageInfo

func (m *StatusRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (*StatusRequest) XXX_MessageName() string {
	return "lcmi.api.update_job.v1alpha1.StatusRequest"
}

type StatusResponse struct {
	Status               *UpdateJobStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *StatusResponse) Reset()      { *m = StatusResponse{} }
func (*StatusResponse) ProtoMessage() {}
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_055147bed48d7c54, []int{7}
}
func (m *StatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusResponse.Merge(m, src)
}
func (m *StatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *StatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StatusResponse proto.InternalMessageInfo

func (m *StatusResponse) GetStatus() *UpdateJobStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (*StatusResponse) XXX_MessageName() string {
	return "lcmi.api.update_job.v1alpha1.StatusResponse"
}

type ExecuteRequest struct {
	UpdateJob            *UpdateJob `protobuf:"bytes,1,opt,name=update_job,json=updateJob,proto3" json:"update_job,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ExecuteRequest) Reset()      { *m = ExecuteRequest{} }
func (*ExecuteRequest) ProtoMessage() {}
func (*ExecuteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_055147bed48d7c54, []int{8}
}
func (m *ExecuteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecuteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecuteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecuteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteRequest.Merge(m, src)
}
func (m *ExecuteRequest) XXX_Size() int {
	return m.Size()
}
func (m *ExecuteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteRequest proto.InternalMessageInfo

func (m *ExecuteRequest) GetUpdateJob() *UpdateJob {
	if m != nil {
		return m.UpdateJob
	}
	return nil
}

func (*ExecuteRequest) XXX_MessageName() string {
	return "lcmi.api.update_job.v1alpha1.ExecuteRequest"
}

type ExecuteResponse struct {
	Status               *UpdateJobStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ExecuteResponse) Reset()      { *m = ExecuteResponse{} }
func (*ExecuteResponse) ProtoMessage() {}
func (*ExecuteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_055147bed48d7c54, []int{9}
}
func (m *ExecuteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecuteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecuteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecuteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteResponse.Merge(m, src)
}
func (m *ExecuteResponse) XXX_Size() int {
	return m.Size()
}
func (m *ExecuteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteResponse proto.InternalMessageInfo

func (m *ExecuteResponse) GetStatus() *UpdateJobStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (*ExecuteResponse) XXX_MessageName() string {
	return "lcmi.api.update_job.v1alpha1.ExecuteResponse"
}
func init() {
	proto.RegisterType((*UpdateJob)(nil), "lcmi.api.update_job.v1alpha1.UpdateJob")
	proto.RegisterType((*UpdateJobSpec)(nil), "lcmi.api.update_job.v1alpha1.UpdateJobSpec")
	proto.RegisterType((*UpdateJobStatus)(nil), "lcmi.api.update_job.v1alpha1.UpdateJobStatus")
	proto.RegisterType((*UpdateJobFilter)(nil), "lcmi.api.update_job.v1alpha1.UpdateJobFilter")
	proto.RegisterMapType((map[string]string)(nil), "lcmi.api.update_job.v1alpha1.UpdateJobFilter.LabelSelectorEntry")
	proto.RegisterType((*ListUpdateJobsRequest)(nil), "lcmi.api.update_job.v1alpha1.ListUpdateJobsRequest")
	proto.RegisterType((*ListUpdateJobsResponse)(nil), "lcmi.api.update_job.v1alpha1.ListUpdateJobsResponse")
	proto.RegisterType((*StatusRequest)(nil), "lcmi.api.update_job.v1alpha1.StatusRequest")
	proto.RegisterType((*StatusResponse)(nil), "lcmi.api.update_job.v1alpha1.StatusResponse")
	proto.RegisterType((*ExecuteRequest)(nil), "lcmi.api.update_job.v1alpha1.ExecuteRequest")
	proto.RegisterType((*ExecuteResponse)(nil), "lcmi.api.update_job.v1alpha1.ExecuteResponse")
}

func init() {
	proto.RegisterFile("lcmi/api/update_job/v1alpha1/api.proto", fileDescriptor_055147bed48d7c54)
}

var fileDescriptor_055147bed48d7c54 = []byte{
	// 731 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xbb, 0x4f, 0x1b, 0x49,
	0x18, 0x67, 0xd6, 0x3c, 0xce, 0x1f, 0xc2, 0x9c, 0xe6, 0x00, 0x59, 0xd6, 0x69, 0x8f, 0xdb, 0x82,
	0x43, 0x3a, 0xbc, 0x16, 0xe6, 0x8a, 0xd3, 0x15, 0x17, 0x42, 0x04, 0x45, 0xe4, 0x28, 0xd1, 0xa0,
	0x28, 0x28, 0x05, 0x66, 0x3c, 0xfe, 0x6c, 0x2f, 0xec, 0x2b, 0xbb, 0x63, 0x07, 0x8a, 0x48, 0xf9,
	0x0b, 0xf2, 0x77, 0xa4, 0xca, 0xdf, 0x41, 0x99, 0x54, 0x49, 0x19, 0x4c, 0x43, 0x49, 0x99, 0x32,
	0xda, 0xa7, 0xb1, 0xc1, 0x60, 0x20, 0xe9, 0x76, 0x66, 0x7f, 0x8f, 0xef, 0x31, 0xf3, 0xed, 0xc2,
	0x92, 0x29, 0x2c, 0xa3, 0xc4, 0x5d, 0xa3, 0xd4, 0x76, 0xeb, 0x5c, 0x62, 0x75, 0xdf, 0xa9, 0x95,
	0x3a, 0xab, 0xdc, 0x74, 0x5b, 0x7c, 0x35, 0xd8, 0xd7, 0x5d, 0xcf, 0x91, 0x0e, 0xfd, 0x3d, 0xc0,
	0xe9, 0xc1, 0xba, 0x87, 0xd3, 0x13, 0x5c, 0x41, 0x4b, 0x55, 0x84, 0x63, 0x59, 0x8e, 0x7d, 0x85,
	0x42, 0x61, 0x31, 0xc5, 0x58, 0x28, 0xf9, 0x15, 0x08, 0xed, 0x33, 0x81, 0xec, 0xf3, 0x50, 0xfd,
	0xb1, 0x53, 0xa3, 0x1b, 0xf0, 0x4b, 0x00, 0xac, 0x73, 0xc9, 0xf3, 0x64, 0x91, 0x2c, 0x4f, 0x97,
	0x97, 0xf4, 0x34, 0x88, 0xe0, 0x4d, 0x6a, 0xaf, 0x3f, 0xad, 0xed, 0xa3, 0x90, 0x4f, 0x62, 0x34,
	0x4b, 0x79, 0xf4, 0x01, 0x8c, 0xfb, 0x2e, 0x8a, 0xbc, 0x12, 0xf2, 0xff, 0xd6, 0xaf, 0x4b, 0x42,
	0x4f, 0xad, 0xb7, 0x5d, 0x14, 0x2c, 0x24, 0xd2, 0x4d, 0x98, 0xf4, 0x25, 0x97, 0x6d, 0x3f, 0x9f,
	0x09, 0x25, 0x8a, 0xa3, 0x4a, 0x84, 0x24, 0x16, 0x93, 0xb5, 0x4f, 0x04, 0x66, 0xfa, 0xe4, 0xe9,
	0x1e, 0xcc, 0x5b, 0x5c, 0xb4, 0x0c, 0x1b, 0xab, 0xa6, 0xd1, 0x40, 0x71, 0x24, 0x4c, 0xac, 0x7a,
	0xd8, 0x88, 0x53, 0x5d, 0x19, 0x96, 0x6a, 0xc5, 0x11, 0xdc, 0x8c, 0xf2, 0x65, 0xd8, 0x40, 0x0f,
	0x6d, 0x81, 0xec, 0xb7, 0x58, 0xaa, 0x92, 0x28, 0x31, 0x6c, 0xd0, 0x5d, 0x98, 0x6b, 0x18, 0x9e,
	0xf5, 0x9a, 0x7b, 0x58, 0x75, 0xb9, 0x38, 0xe0, 0xcd, 0xc8, 0x40, 0xb9, 0x83, 0x01, 0x4d, 0x94,
	0x9e, 0x45, 0x42, 0x0c, 0x1b, 0xda, 0x07, 0x02, 0xb3, 0x03, 0xf9, 0xd2, 0x87, 0x00, 0xc2, 0xb1,
	0xeb, 0x86, 0x34, 0x1c, 0xdb, 0xcf, 0x93, 0xc5, 0xcc, 0xf2, 0x74, 0xf9, 0xcf, 0x61, 0x4e, 0x8f,
	0x12, 0x24, 0xbb, 0x40, 0xa2, 0xff, 0xc3, 0x44, 0x50, 0x34, 0x0c, 0xe3, 0xcc, 0x95, 0x97, 0x7b,
	0xec, 0xe8, 0x68, 0x0d, 0x29, 0x36, 0xb2, 0x88, 0x46, 0xf3, 0x30, 0x65, 0xa1, 0xef, 0xf3, 0x26,
	0x86, 0x2d, 0xcb, 0xb2, 0x64, 0xa9, 0xbd, 0xcb, 0x5c, 0x08, 0x78, 0xcb, 0x30, 0x25, 0x7a, 0x34,
	0x07, 0x8a, 0x51, 0x0f, 0x6b, 0x9e, 0x65, 0x8a, 0x51, 0x1f, 0xde, 0x16, 0xe5, 0x67, 0xb7, 0x25,
	0xf3, 0x63, 0xda, 0x42, 0x9b, 0x90, 0x33, 0x79, 0x0d, 0xcd, 0xaa, 0x8f, 0x26, 0x0a, 0xe9, 0x78,
	0xf9, 0xf1, 0xb0, 0x0d, 0xeb, 0x23, 0x9e, 0xdc, 0xa8, 0x30, 0x7a, 0x25, 0xd0, 0xd8, 0x8e, 0x25,
	0x36, 0x6d, 0xe9, 0x1d, 0xb1, 0x19, 0xf3, 0xe2, 0x5e, 0x61, 0x1d, 0xe8, 0x65, 0x10, 0xfd, 0x15,
	0x32, 0x07, 0x78, 0x14, 0x57, 0x34, 0x78, 0xa4, 0x73, 0x30, 0xd1, 0xe1, 0x66, 0x3b, 0x6a, 0x68,
	0x96, 0x45, 0x8b, 0xff, 0x94, 0x7f, 0x89, 0xb6, 0x0b, 0xf3, 0x15, 0xc3, 0x97, 0xa9, 0xb5, 0xcf,
	0xf0, 0x55, 0x1b, 0x7d, 0x19, 0xdc, 0xba, 0x46, 0x18, 0x46, 0x7c, 0x1b, 0x8a, 0xb7, 0x8a, 0x9d,
	0xc5, 0x64, 0x6d, 0x0f, 0x16, 0x06, 0xf5, 0x7d, 0xd7, 0xb1, 0x7d, 0xa4, 0x5b, 0x00, 0x3d, 0xa1,
	0xf8, 0x9c, 0xfe, 0x35, 0xa2, 0x09, 0xcb, 0xb6, 0x93, 0x47, 0xed, 0x0f, 0x98, 0x89, 0x6f, 0x7a,
	0x1c, 0xf9, 0xc0, 0x79, 0xd2, 0x5e, 0x40, 0x2e, 0x01, 0xc4, 0xd6, 0xbd, 0x89, 0x42, 0xee, 0x33,
	0x51, 0x76, 0x20, 0xb7, 0x79, 0x88, 0xa2, 0x2d, 0x31, 0xb1, 0x1e, 0xcc, 0x89, 0xdc, 0x31, 0xa7,
	0x1d, 0x98, 0x4d, 0x95, 0x2f, 0xc5, 0xac, 0xdc, 0x23, 0xe6, 0xf2, 0x99, 0x02, 0x0b, 0xe9, 0xbb,
	0x0d, 0xcf, 0x39, 0x40, 0x6f, 0x1b, 0xbd, 0x8e, 0x21, 0x90, 0xbe, 0x81, 0x5c, 0x7f, 0xab, 0xe8,
	0xda, 0xf5, 0x1e, 0x57, 0x1e, 0x9c, 0xc2, 0x3f, 0xb7, 0x23, 0x45, 0xe9, 0x69, 0x63, 0x14, 0x61,
	0x32, 0x9e, 0x60, 0x37, 0x7c, 0x23, 0xfa, 0xba, 0x5d, 0x58, 0x19, 0x0d, 0x9c, 0xda, 0xb4, 0x60,
	0x2a, 0x2e, 0x2d, 0xbd, 0x81, 0xda, 0xdf, 0xdb, 0x42, 0x71, 0x44, 0x74, 0xe2, 0xb4, 0x71, 0xf8,
	0xe5, 0x44, 0x1d, 0x3b, 0x3f, 0x51, 0xc9, 0xb7, 0x13, 0x95, 0xbc, 0xed, 0xaa, 0xe4, 0x7d, 0x57,
	0x25, 0xc7, 0x5d, 0x95, 0x7c, 0xec, 0xaa, 0xe4, 0x6b, 0x57, 0x25, 0x67, 0x5d, 0x75, 0xec, 0x3c,
	0xd8, 0x3f, 0x55, 0xc9, 0xf1, 0xa9, 0x4a, 0x5e, 0x6e, 0x35, 0x0d, 0xd9, 0x6a, 0xd7, 0x82, 0x29,
	0x5b, 0x32, 0x3c, 0xc7, 0x16, 0x8e, 0x87, 0xc5, 0x3a, 0x76, 0x4a, 0xe9, 0x1c, 0x2c, 0x5a, 0xdc,
	0xe6, 0x4d, 0xf4, 0x4a, 0xd7, 0xfd, 0x32, 0xd4, 0x26, 0xc3, 0x6f, 0xf9, 0xda, 0xf7, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xc0, 0x28, 0xf4, 0xec, 0x59, 0x08, 0x00, 0x00,
}

func (this *UpdateJob) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*UpdateJob)
	if !ok {
		that2, ok := that.(UpdateJob)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if c := this.Metadata.Compare(that1.Metadata); c != 0 {
		return c
	}
	if c := this.Spec.Compare(that1.Spec); c != 0 {
		return c
	}
	if c := this.Status.Compare(that1.Status); c != 0 {
		return c
	}
	if c := bytes.Compare(this.XXX_unrecognized, that1.XXX_unrecognized); c != 0 {
		return c
	}
	return 0
}
func (this *UpdateJobSpec) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*UpdateJobSpec)
	if !ok {
		that2, ok := that.(UpdateJobSpec)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if c := this.MachineLifecycleRef.Compare(that1.MachineLifecycleRef); c != 0 {
		return c
	}
	if c := this.FirmwarePackageRef.Compare(that1.FirmwarePackageRef); c != 0 {
		return c
	}
	if c := bytes.Compare(this.XXX_unrecognized, that1.XXX_unrecognized); c != 0 {
		return c
	}
	return 0
}
func (this *UpdateJobStatus) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*UpdateJobStatus)
	if !ok {
		that2, ok := that.(UpdateJobStatus)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if len(this.Conditions) != len(that1.Conditions) {
		if len(this.Conditions) < len(that1.Conditions) {
			return -1
		}
		return 1
	}
	for i := range this.Conditions {
		if c := this.Conditions[i].Compare(that1.Conditions[i]); c != 0 {
			return c
		}
	}
	if this.State != that1.State {
		if this.State < that1.State {
			return -1
		}
		return 1
	}
	if this.Message != that1.Message {
		if this.Message < that1.Message {
			return -1
		}
		return 1
	}
	if c := bytes.Compare(this.XXX_unrecognized, that1.XXX_unrecognized); c != 0 {
		return c
	}
	return 0
}
func (this *UpdateJobFilter) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*UpdateJobFilter)
	if !ok {
		that2, ok := that.(UpdateJobFilter)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if this.Id != that1.Id {
		if this.Id < that1.Id {
			return -1
		}
		return 1
	}
	if c := this.MachineLifecycleRef.Compare(that1.MachineLifecycleRef); c != 0 {
		return c
	}
	if c := this.FirmwarePackageRef.Compare(that1.FirmwarePackageRef); c != 0 {
		return c
	}
	if len(this.LabelSelector) != len(that1.LabelSelector) {
		if len(this.LabelSelector) < len(that1.LabelSelector) {
			return -1
		}
		return 1
	}
	for i := range this.LabelSelector {
		if this.LabelSelector[i] != that1.LabelSelector[i] {
			if this.LabelSelector[i] < that1.LabelSelector[i] {
				return -1
			}
			return 1
		}
	}
	if c := bytes.Compare(this.XXX_unrecognized, that1.XXX_unrecognized); c != 0 {
		return c
	}
	return 0
}
func (this *ListUpdateJobsRequest) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*ListUpdateJobsRequest)
	if !ok {
		that2, ok := that.(ListUpdateJobsRequest)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if c := this.Filter.Compare(that1.Filter); c != 0 {
		return c
	}
	if c := bytes.Compare(this.XXX_unrecognized, that1.XXX_unrecognized); c != 0 {
		return c
	}
	return 0
}
func (this *ListUpdateJobsResponse) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*ListUpdateJobsResponse)
	if !ok {
		that2, ok := that.(ListUpdateJobsResponse)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if len(this.UpdateJob) != len(that1.UpdateJob) {
		if len(this.UpdateJob) < len(that1.UpdateJob) {
			return -1
		}
		return 1
	}
	for i := range this.UpdateJob {
		if c := this.UpdateJob[i].Compare(that1.UpdateJob[i]); c != 0 {
			return c
		}
	}
	if c := bytes.Compare(this.XXX_unrecognized, that1.XXX_unrecognized); c != 0 {
		return c
	}
	return 0
}
func (this *StatusRequest) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*StatusRequest)
	if !ok {
		that2, ok := that.(StatusRequest)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if this.Id != that1.Id {
		if this.Id < that1.Id {
			return -1
		}
		return 1
	}
	if c := bytes.Compare(this.XXX_unrecognized, that1.XXX_unrecognized); c != 0 {
		return c
	}
	return 0
}
func (this *StatusResponse) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*StatusResponse)
	if !ok {
		that2, ok := that.(StatusResponse)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if c := this.Status.Compare(that1.Status); c != 0 {
		return c
	}
	if c := bytes.Compare(this.XXX_unrecognized, that1.XXX_unrecognized); c != 0 {
		return c
	}
	return 0
}
func (this *ExecuteRequest) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*ExecuteRequest)
	if !ok {
		that2, ok := that.(ExecuteRequest)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if c := this.UpdateJob.Compare(that1.UpdateJob); c != 0 {
		return c
	}
	if c := bytes.Compare(this.XXX_unrecognized, that1.XXX_unrecognized); c != 0 {
		return c
	}
	return 0
}
func (this *ExecuteResponse) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*ExecuteResponse)
	if !ok {
		that2, ok := that.(ExecuteResponse)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if c := this.Status.Compare(that1.Status); c != 0 {
		return c
	}
	if c := bytes.Compare(this.XXX_unrecognized, that1.XXX_unrecognized); c != 0 {
		return c
	}
	return 0
}
func (this *UpdateJob) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateJob)
	if !ok {
		that2, ok := that.(UpdateJob)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *UpdateJobSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateJobSpec)
	if !ok {
		that2, ok := that.(UpdateJobSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MachineLifecycleRef.Equal(that1.MachineLifecycleRef) {
		return false
	}
	if !this.FirmwarePackageRef.Equal(that1.FirmwarePackageRef) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *UpdateJobStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateJobStatus)
	if !ok {
		that2, ok := that.(UpdateJobStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Conditions) != len(that1.Conditions) {
		return false
	}
	for i := range this.Conditions {
		if !this.Conditions[i].Equal(that1.Conditions[i]) {
			return false
		}
	}
	if this.State != that1.State {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *UpdateJobFilter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateJobFilter)
	if !ok {
		that2, ok := that.(UpdateJobFilter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !this.MachineLifecycleRef.Equal(that1.MachineLifecycleRef) {
		return false
	}
	if !this.FirmwarePackageRef.Equal(that1.FirmwarePackageRef) {
		return false
	}
	if len(this.LabelSelector) != len(that1.LabelSelector) {
		return false
	}
	for i := range this.LabelSelector {
		if this.LabelSelector[i] != that1.LabelSelector[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ListUpdateJobsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListUpdateJobsRequest)
	if !ok {
		that2, ok := that.(ListUpdateJobsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Filter.Equal(that1.Filter) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ListUpdateJobsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListUpdateJobsResponse)
	if !ok {
		that2, ok := that.(ListUpdateJobsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.UpdateJob) != len(that1.UpdateJob) {
		return false
	}
	for i := range this.UpdateJob {
		if !this.UpdateJob[i].Equal(that1.UpdateJob[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *StatusRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StatusRequest)
	if !ok {
		that2, ok := that.(StatusRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *StatusResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StatusResponse)
	if !ok {
		that2, ok := that.(StatusResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ExecuteRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExecuteRequest)
	if !ok {
		that2, ok := that.(ExecuteRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateJob.Equal(that1.UpdateJob) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ExecuteResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExecuteResponse)
	if !ok {
		that2, ok := that.(ExecuteResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *UpdateJob) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&v1alpha1.UpdateJob{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateJobSpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&v1alpha1.UpdateJobSpec{")
	if this.MachineLifecycleRef != nil {
		s = append(s, "MachineLifecycleRef: "+fmt.Sprintf("%#v", this.MachineLifecycleRef)+",\n")
	}
	if this.FirmwarePackageRef != nil {
		s = append(s, "FirmwarePackageRef: "+fmt.Sprintf("%#v", this.FirmwarePackageRef)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateJobStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&v1alpha1.UpdateJobStatus{")
	if this.Conditions != nil {
		s = append(s, "Conditions: "+fmt.Sprintf("%#v", this.Conditions)+",\n")
	}
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateJobFilter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&v1alpha1.UpdateJobFilter{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.MachineLifecycleRef != nil {
		s = append(s, "MachineLifecycleRef: "+fmt.Sprintf("%#v", this.MachineLifecycleRef)+",\n")
	}
	if this.FirmwarePackageRef != nil {
		s = append(s, "FirmwarePackageRef: "+fmt.Sprintf("%#v", this.FirmwarePackageRef)+",\n")
	}
	keysForLabelSelector := make([]string, 0, len(this.LabelSelector))
	for k, _ := range this.LabelSelector {
		keysForLabelSelector = append(keysForLabelSelector, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabelSelector)
	mapStringForLabelSelector := "map[string]string{"
	for _, k := range keysForLabelSelector {
		mapStringForLabelSelector += fmt.Sprintf("%#v: %#v,", k, this.LabelSelector[k])
	}
	mapStringForLabelSelector += "}"
	if this.LabelSelector != nil {
		s = append(s, "LabelSelector: "+mapStringForLabelSelector+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListUpdateJobsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&v1alpha1.ListUpdateJobsRequest{")
	if this.Filter != nil {
		s = append(s, "Filter: "+fmt.Sprintf("%#v", this.Filter)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListUpdateJobsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&v1alpha1.ListUpdateJobsResponse{")
	if this.UpdateJob != nil {
		s = append(s, "UpdateJob: "+fmt.Sprintf("%#v", this.UpdateJob)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StatusRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&v1alpha1.StatusRequest{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StatusResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&v1alpha1.StatusResponse{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExecuteRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&v1alpha1.ExecuteRequest{")
	if this.UpdateJob != nil {
		s = append(s, "UpdateJob: "+fmt.Sprintf("%#v", this.UpdateJob)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExecuteResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&v1alpha1.ExecuteResponse{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringApi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UpdateJobBrokerServiceClient is the client API for UpdateJobBrokerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UpdateJobBrokerServiceClient interface {
	ListUpdateJobs(ctx context.Context, in *ListUpdateJobsRequest, opts ...grpc.CallOption) (*ListUpdateJobsResponse, error)
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error)
}

type updateJobBrokerServiceClient struct {
	cc *grpc.ClientConn
}

func NewUpdateJobBrokerServiceClient(cc *grpc.ClientConn) UpdateJobBrokerServiceClient {
	return &updateJobBrokerServiceClient{cc}
}

func (c *updateJobBrokerServiceClient) ListUpdateJobs(ctx context.Context, in *ListUpdateJobsRequest, opts ...grpc.CallOption) (*ListUpdateJobsResponse, error) {
	out := new(ListUpdateJobsResponse)
	err := c.cc.Invoke(ctx, "/lcmi.api.update_job.v1alpha1.UpdateJobBrokerService/ListUpdateJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateJobBrokerServiceClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/lcmi.api.update_job.v1alpha1.UpdateJobBrokerService/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateJobBrokerServiceClient) Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error) {
	out := new(ExecuteResponse)
	err := c.cc.Invoke(ctx, "/lcmi.api.update_job.v1alpha1.UpdateJobBrokerService/Execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UpdateJobBrokerServiceServer is the server API for UpdateJobBrokerService service.
type UpdateJobBrokerServiceServer interface {
	ListUpdateJobs(context.Context, *ListUpdateJobsRequest) (*ListUpdateJobsResponse, error)
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	Execute(context.Context, *ExecuteRequest) (*ExecuteResponse, error)
}

// UnimplementedUpdateJobBrokerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUpdateJobBrokerServiceServer struct {
}

func (*UnimplementedUpdateJobBrokerServiceServer) ListUpdateJobs(ctx context.Context, req *ListUpdateJobsRequest) (*ListUpdateJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUpdateJobs not implemented")
}
func (*UnimplementedUpdateJobBrokerServiceServer) Status(ctx context.Context, req *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (*UnimplementedUpdateJobBrokerServiceServer) Execute(ctx context.Context, req *ExecuteRequest) (*ExecuteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}

func RegisterUpdateJobBrokerServiceServer(s *grpc.Server, srv UpdateJobBrokerServiceServer) {
	s.RegisterService(&_UpdateJobBrokerService_serviceDesc, srv)
}

func _UpdateJobBrokerService_ListUpdateJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUpdateJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateJobBrokerServiceServer).ListUpdateJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lcmi.api.update_job.v1alpha1.UpdateJobBrokerService/ListUpdateJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateJobBrokerServiceServer).ListUpdateJobs(ctx, req.(*ListUpdateJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateJobBrokerService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateJobBrokerServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lcmi.api.update_job.v1alpha1.UpdateJobBrokerService/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateJobBrokerServiceServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateJobBrokerService_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateJobBrokerServiceServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lcmi.api.update_job.v1alpha1.UpdateJobBrokerService/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateJobBrokerServiceServer).Execute(ctx, req.(*ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UpdateJobBrokerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lcmi.api.update_job.v1alpha1.UpdateJobBrokerService",
	HandlerType: (*UpdateJobBrokerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListUpdateJobs",
			Handler:    _UpdateJobBrokerService_ListUpdateJobs_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _UpdateJobBrokerService_Status_Handler,
		},
		{
			MethodName: "Execute",
			Handler:    _UpdateJobBrokerService_Execute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lcmi/api/update_job/v1alpha1/api.proto",
}

func (m *UpdateJob) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateJob) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateJob) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateJobSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateJobSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateJobSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FirmwarePackageRef != nil {
		{
			size, err := m.FirmwarePackageRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.MachineLifecycleRef != nil {
		{
			size, err := m.MachineLifecycleRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateJobStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateJobStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateJobStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x1a
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Conditions) > 0 {
		for iNdEx := len(m.Conditions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Conditions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpdateJobFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateJobFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateJobFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LabelSelector) > 0 {
		for k := range m.LabelSelector {
			v := m.LabelSelector[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintApi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.FirmwarePackageRef != nil {
		{
			size, err := m.FirmwarePackageRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.MachineLifecycleRef != nil {
		{
			size, err := m.MachineLifecycleRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListUpdateJobsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListUpdateJobsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListUpdateJobsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Filter != nil {
		{
			size, err := m.Filter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListUpdateJobsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListUpdateJobsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListUpdateJobsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UpdateJob) > 0 {
		for iNdEx := len(m.UpdateJob) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UpdateJob[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *StatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExecuteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecuteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdateJob != nil {
		{
			size, err := m.UpdateJob.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExecuteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecuteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedUpdateJob(r randyApi, easy bool) *UpdateJob {
	this := &UpdateJob{}
	if r.Intn(5) != 0 {
		this.Metadata = v1alpha1.NewPopulatedObjectMetadata(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Spec = NewPopulatedUpdateJobSpec(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Status = NewPopulatedUpdateJobStatus(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedApi(r, 4)
	}
	return this
}

func NewPopulatedUpdateJobSpec(r randyApi, easy bool) *UpdateJobSpec {
	this := &UpdateJobSpec{}
	if r.Intn(5) != 0 {
		this.MachineLifecycleRef = v1alpha1.NewPopulatedLocalObjectReference(r, easy)
	}
	if r.Intn(5) != 0 {
		this.FirmwarePackageRef = v1alpha1.NewPopulatedLocalObjectReference(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedApi(r, 3)
	}
	return this
}

func NewPopulatedUpdateJobStatus(r randyApi, easy bool) *UpdateJobStatus {
	this := &UpdateJobStatus{}
	if r.Intn(5) != 0 {
		v1 := r.Intn(5)
		this.Conditions = make([]*v1alpha1.Condition, v1)
		for i := 0; i < v1; i++ {
			this.Conditions[i] = v1alpha1.NewPopulatedCondition(r, easy)
		}
	}
	this.State = v1alpha11.UpdateJobState([]int32{0, 1, 2}[r.Intn(3)])
	this.Message = string(randStringApi(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedApi(r, 4)
	}
	return this
}

func NewPopulatedUpdateJobFilter(r randyApi, easy bool) *UpdateJobFilter {
	this := &UpdateJobFilter{}
	this.Id = string(randStringApi(r))
	if r.Intn(5) != 0 {
		this.MachineLifecycleRef = v1alpha1.NewPopulatedLocalObjectReference(r, easy)
	}
	if r.Intn(5) != 0 {
		this.FirmwarePackageRef = v1alpha1.NewPopulatedLocalObjectReference(r, easy)
	}
	if r.Intn(5) != 0 {
		v2 := r.Intn(10)
		this.LabelSelector = make(map[string]string)
		for i := 0; i < v2; i++ {
			this.LabelSelector[randStringApi(r)] = randStringApi(r)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedApi(r, 5)
	}
	return this
}

func NewPopulatedListUpdateJobsRequest(r randyApi, easy bool) *ListUpdateJobsRequest {
	this := &ListUpdateJobsRequest{}
	if r.Intn(5) != 0 {
		this.Filter = NewPopulatedUpdateJobFilter(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedApi(r, 2)
	}
	return this
}

func NewPopulatedListUpdateJobsResponse(r randyApi, easy bool) *ListUpdateJobsResponse {
	this := &ListUpdateJobsResponse{}
	if r.Intn(5) != 0 {
		v3 := r.Intn(5)
		this.UpdateJob = make([]*UpdateJob, v3)
		for i := 0; i < v3; i++ {
			this.UpdateJob[i] = NewPopulatedUpdateJob(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedApi(r, 2)
	}
	return this
}

func NewPopulatedStatusRequest(r randyApi, easy bool) *StatusRequest {
	this := &StatusRequest{}
	this.Id = string(randStringApi(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedApi(r, 2)
	}
	return this
}

func NewPopulatedStatusResponse(r randyApi, easy bool) *StatusResponse {
	this := &StatusResponse{}
	if r.Intn(5) != 0 {
		this.Status = NewPopulatedUpdateJobStatus(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedApi(r, 2)
	}
	return this
}

func NewPopulatedExecuteRequest(r randyApi, easy bool) *ExecuteRequest {
	this := &ExecuteRequest{}
	if r.Intn(5) != 0 {
		this.UpdateJob = NewPopulatedUpdateJob(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedApi(r, 2)
	}
	return this
}

func NewPopulatedExecuteResponse(r randyApi, easy bool) *ExecuteResponse {
	this := &ExecuteResponse{}
	if r.Intn(5) != 0 {
		this.Status = NewPopulatedUpdateJobStatus(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedApi(r, 3)
	}
	return this
}

type randyApi interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneApi(r randyApi) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringApi(r randyApi) string {
	v4 := r.Intn(100)
	tmps := make([]rune, v4)
	for i := 0; i < v4; i++ {
		tmps[i] = randUTF8RuneApi(r)
	}
	return string(tmps)
}
func randUnrecognizedApi(r randyApi, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldApi(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldApi(dAtA []byte, r randyApi, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateApi(dAtA, uint64(key))
		v5 := r.Int63()
		if r.Intn(2) == 0 {
			v5 *= -1
		}
		dAtA = encodeVarintPopulateApi(dAtA, uint64(v5))
	case 1:
		dAtA = encodeVarintPopulateApi(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateApi(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateApi(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateApi(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateApi(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *UpdateJob) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateJobSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MachineLifecycleRef != nil {
		l = m.MachineLifecycleRef.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.FirmwarePackageRef != nil {
		l = m.FirmwarePackageRef.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateJobStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Conditions) > 0 {
		for _, e := range m.Conditions {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateJobFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.MachineLifecycleRef != nil {
		l = m.MachineLifecycleRef.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.FirmwarePackageRef != nil {
		l = m.FirmwarePackageRef.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.LabelSelector) > 0 {
		for k, v := range m.LabelSelector {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + len(v) + sovApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListUpdateJobsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListUpdateJobsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UpdateJob) > 0 {
		for _, e := range m.UpdateJob {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExecuteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateJob != nil {
		l = m.UpdateJob.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExecuteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *UpdateJob) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateJob{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "ObjectMetadata", "v1alpha1.ObjectMetadata", 1) + `,`,
		`Spec:` + strings.Replace(this.Spec.String(), "UpdateJobSpec", "UpdateJobSpec", 1) + `,`,
		`Status:` + strings.Replace(this.Status.String(), "UpdateJobStatus", "UpdateJobStatus", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateJobSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateJobSpec{`,
		`MachineLifecycleRef:` + strings.Replace(fmt.Sprintf("%v", this.MachineLifecycleRef), "LocalObjectReference", "v1alpha1.LocalObjectReference", 1) + `,`,
		`FirmwarePackageRef:` + strings.Replace(fmt.Sprintf("%v", this.FirmwarePackageRef), "LocalObjectReference", "v1alpha1.LocalObjectReference", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateJobStatus) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForConditions := "[]*Condition{"
	for _, f := range this.Conditions {
		repeatedStringForConditions += strings.Replace(fmt.Sprintf("%v", f), "Condition", "v1alpha1.Condition", 1) + ","
	}
	repeatedStringForConditions += "}"
	s := strings.Join([]string{`&UpdateJobStatus{`,
		`Conditions:` + repeatedStringForConditions + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateJobFilter) String() string {
	if this == nil {
		return "nil"
	}
	keysForLabelSelector := make([]string, 0, len(this.LabelSelector))
	for k, _ := range this.LabelSelector {
		keysForLabelSelector = append(keysForLabelSelector, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabelSelector)
	mapStringForLabelSelector := "map[string]string{"
	for _, k := range keysForLabelSelector {
		mapStringForLabelSelector += fmt.Sprintf("%v: %v,", k, this.LabelSelector[k])
	}
	mapStringForLabelSelector += "}"
	s := strings.Join([]string{`&UpdateJobFilter{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`MachineLifecycleRef:` + strings.Replace(fmt.Sprintf("%v", this.MachineLifecycleRef), "LocalObjectReference", "v1alpha1.LocalObjectReference", 1) + `,`,
		`FirmwarePackageRef:` + strings.Replace(fmt.Sprintf("%v", this.FirmwarePackageRef), "LocalObjectReference", "v1alpha1.LocalObjectReference", 1) + `,`,
		`LabelSelector:` + mapStringForLabelSelector + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListUpdateJobsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListUpdateJobsRequest{`,
		`Filter:` + strings.Replace(this.Filter.String(), "UpdateJobFilter", "UpdateJobFilter", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListUpdateJobsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForUpdateJob := "[]*UpdateJob{"
	for _, f := range this.UpdateJob {
		repeatedStringForUpdateJob += strings.Replace(f.String(), "UpdateJob", "UpdateJob", 1) + ","
	}
	repeatedStringForUpdateJob += "}"
	s := strings.Join([]string{`&ListUpdateJobsResponse{`,
		`UpdateJob:` + repeatedStringForUpdateJob + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StatusRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StatusRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StatusResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StatusResponse{`,
		`Status:` + strings.Replace(this.Status.String(), "UpdateJobStatus", "UpdateJobStatus", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExecuteRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExecuteRequest{`,
		`UpdateJob:` + strings.Replace(this.UpdateJob.String(), "UpdateJob", "UpdateJob", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExecuteResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExecuteResponse{`,
		`Status:` + strings.Replace(this.Status.String(), "UpdateJobStatus", "UpdateJobStatus", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringApi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *UpdateJob) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateJob: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateJob: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &v1alpha1.ObjectMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &UpdateJobSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &UpdateJobStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateJobSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateJobSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateJobSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineLifecycleRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MachineLifecycleRef == nil {
				m.MachineLifecycleRef = &v1alpha1.LocalObjectReference{}
			}
			if err := m.MachineLifecycleRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirmwarePackageRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FirmwarePackageRef == nil {
				m.FirmwarePackageRef = &v1alpha1.LocalObjectReference{}
			}
			if err := m.FirmwarePackageRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateJobStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateJobStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateJobStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = append(m.Conditions, &v1alpha1.Condition{})
			if err := m.Conditions[len(m.Conditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= v1alpha11.UpdateJobState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateJobFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateJobFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateJobFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineLifecycleRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MachineLifecycleRef == nil {
				m.MachineLifecycleRef = &v1alpha1.LocalObjectReference{}
			}
			if err := m.MachineLifecycleRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirmwarePackageRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FirmwarePackageRef == nil {
				m.FirmwarePackageRef = &v1alpha1.LocalObjectReference{}
			}
			if err := m.FirmwarePackageRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LabelSelector == nil {
				m.LabelSelector = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.LabelSelector[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListUpdateJobsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListUpdateJobsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListUpdateJobsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &UpdateJobFilter{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListUpdateJobsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListUpdateJobsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListUpdateJobsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateJob", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateJob = append(m.UpdateJob, &UpdateJob{})
			if err := m.UpdateJob[len(m.UpdateJob)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &UpdateJobStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecuteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecuteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecuteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateJob", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdateJob == nil {
				m.UpdateJob = &UpdateJob{}
			}
			if err := m.UpdateJob.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecuteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecuteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecuteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &UpdateJobStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
