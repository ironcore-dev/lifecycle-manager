// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: machine/v1alpha1/api.proto

package machinev1alpha1connect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect "connectrpc.com/connect"
	v1alpha1 "github.com/ironcore-dev/lifecycle-manager/lcmi/api/machine/v1alpha1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MachineServiceName is the fully-qualified name of the MachineService service.
	MachineServiceName = "machine.v1alpha1.MachineService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MachineServiceScanMachineProcedure is the fully-qualified name of the MachineService's
	// ScanMachine RPC.
	MachineServiceScanMachineProcedure = "/machine.v1alpha1.MachineService/ScanMachine"
	// MachineServiceInstallProcedure is the fully-qualified name of the MachineService's Install RPC.
	MachineServiceInstallProcedure = "/machine.v1alpha1.MachineService/Install"
	// MachineServiceUpdateMachineStatusProcedure is the fully-qualified name of the MachineService's
	// UpdateMachineStatus RPC.
	MachineServiceUpdateMachineStatusProcedure = "/machine.v1alpha1.MachineService/UpdateMachineStatus"
	// MachineServiceListMachinesProcedure is the fully-qualified name of the MachineService's
	// ListMachines RPC.
	MachineServiceListMachinesProcedure = "/machine.v1alpha1.MachineService/ListMachines"
	// MachineServiceAddPackageVersionProcedure is the fully-qualified name of the MachineService's
	// AddPackageVersion RPC.
	MachineServiceAddPackageVersionProcedure = "/machine.v1alpha1.MachineService/AddPackageVersion"
	// MachineServiceSetPackageVersionProcedure is the fully-qualified name of the MachineService's
	// SetPackageVersion RPC.
	MachineServiceSetPackageVersionProcedure = "/machine.v1alpha1.MachineService/SetPackageVersion"
	// MachineServiceRemovePackageVersionProcedure is the fully-qualified name of the MachineService's
	// RemovePackageVersion RPC.
	MachineServiceRemovePackageVersionProcedure = "/machine.v1alpha1.MachineService/RemovePackageVersion"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	machineServiceServiceDescriptor                    = v1alpha1.File_machine_v1alpha1_api_proto.Services().ByName("MachineService")
	machineServiceScanMachineMethodDescriptor          = machineServiceServiceDescriptor.Methods().ByName("ScanMachine")
	machineServiceInstallMethodDescriptor              = machineServiceServiceDescriptor.Methods().ByName("Install")
	machineServiceUpdateMachineStatusMethodDescriptor  = machineServiceServiceDescriptor.Methods().ByName("UpdateMachineStatus")
	machineServiceListMachinesMethodDescriptor         = machineServiceServiceDescriptor.Methods().ByName("ListMachines")
	machineServiceAddPackageVersionMethodDescriptor    = machineServiceServiceDescriptor.Methods().ByName("AddPackageVersion")
	machineServiceSetPackageVersionMethodDescriptor    = machineServiceServiceDescriptor.Methods().ByName("SetPackageVersion")
	machineServiceRemovePackageVersionMethodDescriptor = machineServiceServiceDescriptor.Methods().ByName("RemovePackageVersion")
)

// MachineServiceClient is a client for the machine.v1alpha1.MachineService service.
type MachineServiceClient interface {
	ScanMachine(context.Context, *connect.Request[v1alpha1.ScanMachineRequest]) (*connect.Response[v1alpha1.ScanMachineResponse], error)
	Install(context.Context, *connect.Request[v1alpha1.InstallRequest]) (*connect.Response[v1alpha1.InstallResponse], error)
	UpdateMachineStatus(context.Context, *connect.Request[v1alpha1.UpdateMachineStatusRequest]) (*connect.Response[v1alpha1.UpdateMachineStatusResponse], error)
	ListMachines(context.Context, *connect.Request[v1alpha1.ListMachinesRequest]) (*connect.Response[v1alpha1.ListMachinesResponse], error)
	AddPackageVersion(context.Context, *connect.Request[v1alpha1.AddPackageVersionRequest]) (*connect.Response[v1alpha1.AddPackageVersionResponse], error)
	SetPackageVersion(context.Context, *connect.Request[v1alpha1.SetPackageVersionRequest]) (*connect.Response[v1alpha1.SetPackageVersionResponse], error)
	RemovePackageVersion(context.Context, *connect.Request[v1alpha1.RemovePackageVersionRequest]) (*connect.Response[v1alpha1.RemovePackageVersionResponse], error)
}

// NewMachineServiceClient constructs a client for the machine.v1alpha1.MachineService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMachineServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MachineServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &machineServiceClient{
		scanMachine: connect.NewClient[v1alpha1.ScanMachineRequest, v1alpha1.ScanMachineResponse](
			httpClient,
			baseURL+MachineServiceScanMachineProcedure,
			connect.WithSchema(machineServiceScanMachineMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		install: connect.NewClient[v1alpha1.InstallRequest, v1alpha1.InstallResponse](
			httpClient,
			baseURL+MachineServiceInstallProcedure,
			connect.WithSchema(machineServiceInstallMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateMachineStatus: connect.NewClient[v1alpha1.UpdateMachineStatusRequest, v1alpha1.UpdateMachineStatusResponse](
			httpClient,
			baseURL+MachineServiceUpdateMachineStatusProcedure,
			connect.WithSchema(machineServiceUpdateMachineStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listMachines: connect.NewClient[v1alpha1.ListMachinesRequest, v1alpha1.ListMachinesResponse](
			httpClient,
			baseURL+MachineServiceListMachinesProcedure,
			connect.WithSchema(machineServiceListMachinesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		addPackageVersion: connect.NewClient[v1alpha1.AddPackageVersionRequest, v1alpha1.AddPackageVersionResponse](
			httpClient,
			baseURL+MachineServiceAddPackageVersionProcedure,
			connect.WithSchema(machineServiceAddPackageVersionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setPackageVersion: connect.NewClient[v1alpha1.SetPackageVersionRequest, v1alpha1.SetPackageVersionResponse](
			httpClient,
			baseURL+MachineServiceSetPackageVersionProcedure,
			connect.WithSchema(machineServiceSetPackageVersionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		removePackageVersion: connect.NewClient[v1alpha1.RemovePackageVersionRequest, v1alpha1.RemovePackageVersionResponse](
			httpClient,
			baseURL+MachineServiceRemovePackageVersionProcedure,
			connect.WithSchema(machineServiceRemovePackageVersionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// machineServiceClient implements MachineServiceClient.
type machineServiceClient struct {
	scanMachine          *connect.Client[v1alpha1.ScanMachineRequest, v1alpha1.ScanMachineResponse]
	install              *connect.Client[v1alpha1.InstallRequest, v1alpha1.InstallResponse]
	updateMachineStatus  *connect.Client[v1alpha1.UpdateMachineStatusRequest, v1alpha1.UpdateMachineStatusResponse]
	listMachines         *connect.Client[v1alpha1.ListMachinesRequest, v1alpha1.ListMachinesResponse]
	addPackageVersion    *connect.Client[v1alpha1.AddPackageVersionRequest, v1alpha1.AddPackageVersionResponse]
	setPackageVersion    *connect.Client[v1alpha1.SetPackageVersionRequest, v1alpha1.SetPackageVersionResponse]
	removePackageVersion *connect.Client[v1alpha1.RemovePackageVersionRequest, v1alpha1.RemovePackageVersionResponse]
}

// ScanMachine calls machine.v1alpha1.MachineService.ScanMachine.
func (c *machineServiceClient) ScanMachine(ctx context.Context, req *connect.Request[v1alpha1.ScanMachineRequest]) (*connect.Response[v1alpha1.ScanMachineResponse], error) {
	return c.scanMachine.CallUnary(ctx, req)
}

// Install calls machine.v1alpha1.MachineService.Install.
func (c *machineServiceClient) Install(ctx context.Context, req *connect.Request[v1alpha1.InstallRequest]) (*connect.Response[v1alpha1.InstallResponse], error) {
	return c.install.CallUnary(ctx, req)
}

// UpdateMachineStatus calls machine.v1alpha1.MachineService.UpdateMachineStatus.
func (c *machineServiceClient) UpdateMachineStatus(ctx context.Context, req *connect.Request[v1alpha1.UpdateMachineStatusRequest]) (*connect.Response[v1alpha1.UpdateMachineStatusResponse], error) {
	return c.updateMachineStatus.CallUnary(ctx, req)
}

// ListMachines calls machine.v1alpha1.MachineService.ListMachines.
func (c *machineServiceClient) ListMachines(ctx context.Context, req *connect.Request[v1alpha1.ListMachinesRequest]) (*connect.Response[v1alpha1.ListMachinesResponse], error) {
	return c.listMachines.CallUnary(ctx, req)
}

// AddPackageVersion calls machine.v1alpha1.MachineService.AddPackageVersion.
func (c *machineServiceClient) AddPackageVersion(ctx context.Context, req *connect.Request[v1alpha1.AddPackageVersionRequest]) (*connect.Response[v1alpha1.AddPackageVersionResponse], error) {
	return c.addPackageVersion.CallUnary(ctx, req)
}

// SetPackageVersion calls machine.v1alpha1.MachineService.SetPackageVersion.
func (c *machineServiceClient) SetPackageVersion(ctx context.Context, req *connect.Request[v1alpha1.SetPackageVersionRequest]) (*connect.Response[v1alpha1.SetPackageVersionResponse], error) {
	return c.setPackageVersion.CallUnary(ctx, req)
}

// RemovePackageVersion calls machine.v1alpha1.MachineService.RemovePackageVersion.
func (c *machineServiceClient) RemovePackageVersion(ctx context.Context, req *connect.Request[v1alpha1.RemovePackageVersionRequest]) (*connect.Response[v1alpha1.RemovePackageVersionResponse], error) {
	return c.removePackageVersion.CallUnary(ctx, req)
}

// MachineServiceHandler is an implementation of the machine.v1alpha1.MachineService service.
type MachineServiceHandler interface {
	ScanMachine(context.Context, *connect.Request[v1alpha1.ScanMachineRequest]) (*connect.Response[v1alpha1.ScanMachineResponse], error)
	Install(context.Context, *connect.Request[v1alpha1.InstallRequest]) (*connect.Response[v1alpha1.InstallResponse], error)
	UpdateMachineStatus(context.Context, *connect.Request[v1alpha1.UpdateMachineStatusRequest]) (*connect.Response[v1alpha1.UpdateMachineStatusResponse], error)
	ListMachines(context.Context, *connect.Request[v1alpha1.ListMachinesRequest]) (*connect.Response[v1alpha1.ListMachinesResponse], error)
	AddPackageVersion(context.Context, *connect.Request[v1alpha1.AddPackageVersionRequest]) (*connect.Response[v1alpha1.AddPackageVersionResponse], error)
	SetPackageVersion(context.Context, *connect.Request[v1alpha1.SetPackageVersionRequest]) (*connect.Response[v1alpha1.SetPackageVersionResponse], error)
	RemovePackageVersion(context.Context, *connect.Request[v1alpha1.RemovePackageVersionRequest]) (*connect.Response[v1alpha1.RemovePackageVersionResponse], error)
}

// NewMachineServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMachineServiceHandler(svc MachineServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	machineServiceScanMachineHandler := connect.NewUnaryHandler(
		MachineServiceScanMachineProcedure,
		svc.ScanMachine,
		connect.WithSchema(machineServiceScanMachineMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	machineServiceInstallHandler := connect.NewUnaryHandler(
		MachineServiceInstallProcedure,
		svc.Install,
		connect.WithSchema(machineServiceInstallMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	machineServiceUpdateMachineStatusHandler := connect.NewUnaryHandler(
		MachineServiceUpdateMachineStatusProcedure,
		svc.UpdateMachineStatus,
		connect.WithSchema(machineServiceUpdateMachineStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	machineServiceListMachinesHandler := connect.NewUnaryHandler(
		MachineServiceListMachinesProcedure,
		svc.ListMachines,
		connect.WithSchema(machineServiceListMachinesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	machineServiceAddPackageVersionHandler := connect.NewUnaryHandler(
		MachineServiceAddPackageVersionProcedure,
		svc.AddPackageVersion,
		connect.WithSchema(machineServiceAddPackageVersionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	machineServiceSetPackageVersionHandler := connect.NewUnaryHandler(
		MachineServiceSetPackageVersionProcedure,
		svc.SetPackageVersion,
		connect.WithSchema(machineServiceSetPackageVersionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	machineServiceRemovePackageVersionHandler := connect.NewUnaryHandler(
		MachineServiceRemovePackageVersionProcedure,
		svc.RemovePackageVersion,
		connect.WithSchema(machineServiceRemovePackageVersionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/machine.v1alpha1.MachineService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MachineServiceScanMachineProcedure:
			machineServiceScanMachineHandler.ServeHTTP(w, r)
		case MachineServiceInstallProcedure:
			machineServiceInstallHandler.ServeHTTP(w, r)
		case MachineServiceUpdateMachineStatusProcedure:
			machineServiceUpdateMachineStatusHandler.ServeHTTP(w, r)
		case MachineServiceListMachinesProcedure:
			machineServiceListMachinesHandler.ServeHTTP(w, r)
		case MachineServiceAddPackageVersionProcedure:
			machineServiceAddPackageVersionHandler.ServeHTTP(w, r)
		case MachineServiceSetPackageVersionProcedure:
			machineServiceSetPackageVersionHandler.ServeHTTP(w, r)
		case MachineServiceRemovePackageVersionProcedure:
			machineServiceRemovePackageVersionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMachineServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMachineServiceHandler struct{}

func (UnimplementedMachineServiceHandler) ScanMachine(context.Context, *connect.Request[v1alpha1.ScanMachineRequest]) (*connect.Response[v1alpha1.ScanMachineResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("machine.v1alpha1.MachineService.ScanMachine is not implemented"))
}

func (UnimplementedMachineServiceHandler) Install(context.Context, *connect.Request[v1alpha1.InstallRequest]) (*connect.Response[v1alpha1.InstallResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("machine.v1alpha1.MachineService.Install is not implemented"))
}

func (UnimplementedMachineServiceHandler) UpdateMachineStatus(context.Context, *connect.Request[v1alpha1.UpdateMachineStatusRequest]) (*connect.Response[v1alpha1.UpdateMachineStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("machine.v1alpha1.MachineService.UpdateMachineStatus is not implemented"))
}

func (UnimplementedMachineServiceHandler) ListMachines(context.Context, *connect.Request[v1alpha1.ListMachinesRequest]) (*connect.Response[v1alpha1.ListMachinesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("machine.v1alpha1.MachineService.ListMachines is not implemented"))
}

func (UnimplementedMachineServiceHandler) AddPackageVersion(context.Context, *connect.Request[v1alpha1.AddPackageVersionRequest]) (*connect.Response[v1alpha1.AddPackageVersionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("machine.v1alpha1.MachineService.AddPackageVersion is not implemented"))
}

func (UnimplementedMachineServiceHandler) SetPackageVersion(context.Context, *connect.Request[v1alpha1.SetPackageVersionRequest]) (*connect.Response[v1alpha1.SetPackageVersionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("machine.v1alpha1.MachineService.SetPackageVersion is not implemented"))
}

func (UnimplementedMachineServiceHandler) RemovePackageVersion(context.Context, *connect.Request[v1alpha1.RemovePackageVersionRequest]) (*connect.Response[v1alpha1.RemovePackageVersionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("machine.v1alpha1.MachineService.RemovePackageVersion is not implemented"))
}
