// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lcmi/api/firmwarepackage/v1alpha1/api.proto

package v1alpha1

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	v1alpha11 "github.com/ironcore-dev/lifecycle-manager/lcmi/api/common/v1alpha1"
	v1alpha1 "github.com/ironcore-dev/lifecycle-manager/lcmi/api/meta/v1alpha1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FirmwarePackage struct {
	Metadata             *v1alpha1.ObjectMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec                 *FirmwarePackageSpec     `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *FirmwarePackage) Reset()      { *m = FirmwarePackage{} }
func (*FirmwarePackage) ProtoMessage() {}
func (*FirmwarePackage) Descriptor() ([]byte, []int) {
	return fileDescriptor_24590880866c81fc, []int{0}
}
func (m *FirmwarePackage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FirmwarePackage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FirmwarePackage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FirmwarePackage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirmwarePackage.Merge(m, src)
}
func (m *FirmwarePackage) XXX_Size() int {
	return m.Size()
}
func (m *FirmwarePackage) XXX_DiscardUnknown() {
	xxx_messageInfo_FirmwarePackage.DiscardUnknown(m)
}

var xxx_messageInfo_FirmwarePackage proto.InternalMessageInfo

func (m *FirmwarePackage) GetMetadata() *v1alpha1.ObjectMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *FirmwarePackage) GetSpec() *FirmwarePackageSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (*FirmwarePackage) XXX_MessageName() string {
	return "lcmi.api.firmwarepackage.v1alpha1.FirmwarePackage"
}

type FirmwarePackageSpec struct {
	MachineTypeRef       *v1alpha1.LocalObjectReference `protobuf:"bytes,1,opt,name=machine_type_ref,json=machineTypeRef,proto3" json:"machine_type_ref,omitempty"`
	Name                 string                         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version              string                         `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Source               string                         `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	RebootRequired       bool                           `protobuf:"varint,5,opt,name=reboot_required,json=rebootRequired,proto3" json:"reboot_required,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *FirmwarePackageSpec) Reset()      { *m = FirmwarePackageSpec{} }
func (*FirmwarePackageSpec) ProtoMessage() {}
func (*FirmwarePackageSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_24590880866c81fc, []int{1}
}
func (m *FirmwarePackageSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FirmwarePackageSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FirmwarePackageSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FirmwarePackageSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirmwarePackageSpec.Merge(m, src)
}
func (m *FirmwarePackageSpec) XXX_Size() int {
	return m.Size()
}
func (m *FirmwarePackageSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_FirmwarePackageSpec.DiscardUnknown(m)
}

var xxx_messageInfo_FirmwarePackageSpec proto.InternalMessageInfo

func (m *FirmwarePackageSpec) GetMachineTypeRef() *v1alpha1.LocalObjectReference {
	if m != nil {
		return m.MachineTypeRef
	}
	return nil
}

func (m *FirmwarePackageSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FirmwarePackageSpec) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *FirmwarePackageSpec) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *FirmwarePackageSpec) GetRebootRequired() bool {
	if m != nil {
		return m.RebootRequired
	}
	return false
}

func (*FirmwarePackageSpec) XXX_MessageName() string {
	return "lcmi.api.firmwarepackage.v1alpha1.FirmwarePackageSpec"
}

type FirmwarePackageFilter struct {
	Id                   string                         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	MachineTypeRed       *v1alpha1.LocalObjectReference `protobuf:"bytes,2,opt,name=machine_type_red,json=machineTypeRed,proto3" json:"machine_type_red,omitempty"`
	LabelSelector        map[string]string              `protobuf:"bytes,3,rep,name=label_selector,json=labelSelector,proto3" json:"label_selector,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *FirmwarePackageFilter) Reset()      { *m = FirmwarePackageFilter{} }
func (*FirmwarePackageFilter) ProtoMessage() {}
func (*FirmwarePackageFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_24590880866c81fc, []int{2}
}
func (m *FirmwarePackageFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FirmwarePackageFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FirmwarePackageFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FirmwarePackageFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirmwarePackageFilter.Merge(m, src)
}
func (m *FirmwarePackageFilter) XXX_Size() int {
	return m.Size()
}
func (m *FirmwarePackageFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_FirmwarePackageFilter.DiscardUnknown(m)
}

var xxx_messageInfo_FirmwarePackageFilter proto.InternalMessageInfo

func (m *FirmwarePackageFilter) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *FirmwarePackageFilter) GetMachineTypeRed() *v1alpha1.LocalObjectReference {
	if m != nil {
		return m.MachineTypeRed
	}
	return nil
}

func (m *FirmwarePackageFilter) GetLabelSelector() map[string]string {
	if m != nil {
		return m.LabelSelector
	}
	return nil
}

func (*FirmwarePackageFilter) XXX_MessageName() string {
	return "lcmi.api.firmwarepackage.v1alpha1.FirmwarePackageFilter"
}

type ListFirmwarePackagesRequest struct {
	Filter               *FirmwarePackageFilter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ListFirmwarePackagesRequest) Reset()      { *m = ListFirmwarePackagesRequest{} }
func (*ListFirmwarePackagesRequest) ProtoMessage() {}
func (*ListFirmwarePackagesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_24590880866c81fc, []int{3}
}
func (m *ListFirmwarePackagesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListFirmwarePackagesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListFirmwarePackagesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListFirmwarePackagesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListFirmwarePackagesRequest.Merge(m, src)
}
func (m *ListFirmwarePackagesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListFirmwarePackagesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListFirmwarePackagesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListFirmwarePackagesRequest proto.InternalMessageInfo

func (m *ListFirmwarePackagesRequest) GetFilter() *FirmwarePackageFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (*ListFirmwarePackagesRequest) XXX_MessageName() string {
	return "lcmi.api.firmwarepackage.v1alpha1.ListFirmwarePackagesRequest"
}

type ListFirmwarePackagesResponse struct {
	FirmwarePackage      []*FirmwarePackage `protobuf:"bytes,1,rep,name=firmware_package,json=firmwarePackage,proto3" json:"firmware_package,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ListFirmwarePackagesResponse) Reset()      { *m = ListFirmwarePackagesResponse{} }
func (*ListFirmwarePackagesResponse) ProtoMessage() {}
func (*ListFirmwarePackagesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_24590880866c81fc, []int{4}
}
func (m *ListFirmwarePackagesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListFirmwarePackagesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListFirmwarePackagesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListFirmwarePackagesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListFirmwarePackagesResponse.Merge(m, src)
}
func (m *ListFirmwarePackagesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListFirmwarePackagesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListFirmwarePackagesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListFirmwarePackagesResponse proto.InternalMessageInfo

func (m *ListFirmwarePackagesResponse) GetFirmwarePackage() []*FirmwarePackage {
	if m != nil {
		return m.FirmwarePackage
	}
	return nil
}

func (*ListFirmwarePackagesResponse) XXX_MessageName() string {
	return "lcmi.api.firmwarepackage.v1alpha1.ListFirmwarePackagesResponse"
}

type CreateFirmwarePackageRequest struct {
	Spec                 *FirmwarePackageSpec `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CreateFirmwarePackageRequest) Reset()      { *m = CreateFirmwarePackageRequest{} }
func (*CreateFirmwarePackageRequest) ProtoMessage() {}
func (*CreateFirmwarePackageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_24590880866c81fc, []int{5}
}
func (m *CreateFirmwarePackageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateFirmwarePackageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateFirmwarePackageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateFirmwarePackageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateFirmwarePackageRequest.Merge(m, src)
}
func (m *CreateFirmwarePackageRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateFirmwarePackageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateFirmwarePackageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateFirmwarePackageRequest proto.InternalMessageInfo

func (m *CreateFirmwarePackageRequest) GetSpec() *FirmwarePackageSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (*CreateFirmwarePackageRequest) XXX_MessageName() string {
	return "lcmi.api.firmwarepackage.v1alpha1.CreateFirmwarePackageRequest"
}

type CreateFirmwarePackageResponse struct {
	Result               v1alpha11.CreateResult `protobuf:"varint,1,opt,name=result,proto3,enum=lcmi.api.common.v1alpha1.CreateResult" json:"result,omitempty"`
	FirmwarePackage      *FirmwarePackage       `protobuf:"bytes,2,opt,name=firmware_package,json=firmwarePackage,proto3" json:"firmware_package,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *CreateFirmwarePackageResponse) Reset()      { *m = CreateFirmwarePackageResponse{} }
func (*CreateFirmwarePackageResponse) ProtoMessage() {}
func (*CreateFirmwarePackageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_24590880866c81fc, []int{6}
}
func (m *CreateFirmwarePackageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateFirmwarePackageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateFirmwarePackageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateFirmwarePackageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateFirmwarePackageResponse.Merge(m, src)
}
func (m *CreateFirmwarePackageResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateFirmwarePackageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateFirmwarePackageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateFirmwarePackageResponse proto.InternalMessageInfo

func (m *CreateFirmwarePackageResponse) GetResult() v1alpha11.CreateResult {
	if m != nil {
		return m.Result
	}
	return v1alpha11.CreateResult_CREATE_RESULT_UNSPECIFIED
}

func (m *CreateFirmwarePackageResponse) GetFirmwarePackage() *FirmwarePackage {
	if m != nil {
		return m.FirmwarePackage
	}
	return nil
}

func (*CreateFirmwarePackageResponse) XXX_MessageName() string {
	return "lcmi.api.firmwarepackage.v1alpha1.CreateFirmwarePackageResponse"
}

type DeleteFirmwarePackageRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteFirmwarePackageRequest) Reset()      { *m = DeleteFirmwarePackageRequest{} }
func (*DeleteFirmwarePackageRequest) ProtoMessage() {}
func (*DeleteFirmwarePackageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_24590880866c81fc, []int{7}
}
func (m *DeleteFirmwarePackageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteFirmwarePackageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteFirmwarePackageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteFirmwarePackageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteFirmwarePackageRequest.Merge(m, src)
}
func (m *DeleteFirmwarePackageRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteFirmwarePackageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteFirmwarePackageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteFirmwarePackageRequest proto.InternalMessageInfo

func (m *DeleteFirmwarePackageRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (*DeleteFirmwarePackageRequest) XXX_MessageName() string {
	return "lcmi.api.firmwarepackage.v1alpha1.DeleteFirmwarePackageRequest"
}

type DeleteFirmwarePackageResponse struct {
	Result               v1alpha11.DeleteResult `protobuf:"varint,1,opt,name=result,proto3,enum=lcmi.api.common.v1alpha1.DeleteResult" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *DeleteFirmwarePackageResponse) Reset()      { *m = DeleteFirmwarePackageResponse{} }
func (*DeleteFirmwarePackageResponse) ProtoMessage() {}
func (*DeleteFirmwarePackageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_24590880866c81fc, []int{8}
}
func (m *DeleteFirmwarePackageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteFirmwarePackageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteFirmwarePackageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteFirmwarePackageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteFirmwarePackageResponse.Merge(m, src)
}
func (m *DeleteFirmwarePackageResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteFirmwarePackageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteFirmwarePackageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteFirmwarePackageResponse proto.InternalMessageInfo

func (m *DeleteFirmwarePackageResponse) GetResult() v1alpha11.DeleteResult {
	if m != nil {
		return m.Result
	}
	return v1alpha11.DeleteResult_DELETE_RESULT_UNSPECIFIED
}

func (*DeleteFirmwarePackageResponse) XXX_MessageName() string {
	return "lcmi.api.firmwarepackage.v1alpha1.DeleteFirmwarePackageResponse"
}
func init() {
	proto.RegisterType((*FirmwarePackage)(nil), "lcmi.api.firmwarepackage.v1alpha1.FirmwarePackage")
	proto.RegisterType((*FirmwarePackageSpec)(nil), "lcmi.api.firmwarepackage.v1alpha1.FirmwarePackageSpec")
	proto.RegisterType((*FirmwarePackageFilter)(nil), "lcmi.api.firmwarepackage.v1alpha1.FirmwarePackageFilter")
	proto.RegisterMapType((map[string]string)(nil), "lcmi.api.firmwarepackage.v1alpha1.FirmwarePackageFilter.LabelSelectorEntry")
	proto.RegisterType((*ListFirmwarePackagesRequest)(nil), "lcmi.api.firmwarepackage.v1alpha1.ListFirmwarePackagesRequest")
	proto.RegisterType((*ListFirmwarePackagesResponse)(nil), "lcmi.api.firmwarepackage.v1alpha1.ListFirmwarePackagesResponse")
	proto.RegisterType((*CreateFirmwarePackageRequest)(nil), "lcmi.api.firmwarepackage.v1alpha1.CreateFirmwarePackageRequest")
	proto.RegisterType((*CreateFirmwarePackageResponse)(nil), "lcmi.api.firmwarepackage.v1alpha1.CreateFirmwarePackageResponse")
	proto.RegisterType((*DeleteFirmwarePackageRequest)(nil), "lcmi.api.firmwarepackage.v1alpha1.DeleteFirmwarePackageRequest")
	proto.RegisterType((*DeleteFirmwarePackageResponse)(nil), "lcmi.api.firmwarepackage.v1alpha1.DeleteFirmwarePackageResponse")
}

func init() {
	proto.RegisterFile("lcmi/api/firmwarepackage/v1alpha1/api.proto", fileDescriptor_24590880866c81fc)
}

var fileDescriptor_24590880866c81fc = []byte{
	// 727 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xc1, 0x4f, 0x13, 0x4d,
	0x14, 0xef, 0xb4, 0xd0, 0x0f, 0x86, 0x7c, 0x85, 0xcc, 0x07, 0x5f, 0x36, 0xb5, 0x6c, 0xea, 0x1e,
	0x94, 0x44, 0xd9, 0x86, 0x9a, 0x18, 0xe2, 0x01, 0x09, 0x2a, 0x07, 0xc1, 0x48, 0x16, 0xe3, 0xc1,
	0xc4, 0x34, 0xd3, 0xe9, 0x2b, 0x2c, 0xec, 0xee, 0xac, 0xb3, 0xd3, 0x9a, 0x1e, 0x48, 0xfc, 0x37,
	0x4c, 0xbc, 0x78, 0xf3, 0x1f, 0xf0, 0xea, 0x99, 0xa3, 0x47, 0x0f, 0x1e, 0xa4, 0x5c, 0x3c, 0x72,
	0xe4, 0x68, 0x76, 0x77, 0x5a, 0x61, 0xdd, 0x96, 0x82, 0xdc, 0x76, 0xde, 0xfc, 0xe6, 0xf7, 0x7e,
	0xbf, 0x37, 0xef, 0x4d, 0x8b, 0xef, 0x38, 0xcc, 0xb5, 0x2b, 0xd4, 0xb7, 0x2b, 0x4d, 0x5b, 0xb8,
	0x6f, 0xa9, 0x00, 0x9f, 0xb2, 0x7d, 0xba, 0x03, 0x95, 0xf6, 0x12, 0x75, 0xfc, 0x5d, 0xba, 0x14,
	0x6e, 0x9a, 0xbe, 0xe0, 0x92, 0x93, 0x9b, 0x21, 0xd8, 0x0c, 0xd7, 0x09, 0xb0, 0xd9, 0x03, 0x17,
	0x8d, 0x3e, 0x1f, 0xe3, 0xae, 0xcb, 0xbd, 0x14, 0x9a, 0x62, 0xb9, 0x8f, 0x71, 0x41, 0xd2, 0x14,
	0x84, 0xf1, 0x11, 0xe1, 0xe9, 0x75, 0x95, 0x62, 0x2b, 0x4e, 0x41, 0xd6, 0xf0, 0x44, 0x08, 0x6f,
	0x50, 0x49, 0x35, 0x54, 0x46, 0x0b, 0x53, 0xd5, 0x5b, 0x66, 0x5f, 0x4f, 0xb8, 0xd3, 0x17, 0x61,
	0x3e, 0xaf, 0xef, 0x01, 0x93, 0xcf, 0x14, 0xda, 0xea, 0x9f, 0x23, 0x4f, 0xf1, 0x58, 0xe0, 0x03,
	0xd3, 0xb2, 0xd1, 0xf9, 0xfb, 0xe6, 0x85, 0x7e, 0xcc, 0x84, 0x8a, 0x6d, 0x1f, 0x98, 0x15, 0x71,
	0x18, 0xdf, 0x11, 0xfe, 0x2f, 0x65, 0x97, 0xbc, 0xc4, 0x33, 0x2e, 0x65, 0xbb, 0xb6, 0x07, 0x35,
	0xd9, 0xf1, 0xa1, 0x26, 0xa0, 0xa9, 0xf4, 0xde, 0x1d, 0xa4, 0x77, 0x93, 0x33, 0xea, 0xc4, 0xa2,
	0x2d, 0x68, 0x82, 0x00, 0x8f, 0x81, 0x55, 0x50, 0x2c, 0x2f, 0x3a, 0x3e, 0x58, 0xd0, 0x24, 0x04,
	0x8f, 0x79, 0xd4, 0x85, 0x48, 0xfb, 0xa4, 0x15, 0x7d, 0x13, 0x0d, 0xff, 0xd3, 0x06, 0x11, 0xd8,
	0xdc, 0xd3, 0x72, 0x51, 0xb8, 0xb7, 0x24, 0xff, 0xe3, 0x7c, 0xc0, 0x5b, 0x82, 0x81, 0x36, 0x16,
	0x6d, 0xa8, 0x15, 0xb9, 0x8d, 0xa7, 0x05, 0xd4, 0x39, 0x97, 0x35, 0x01, 0x6f, 0x5a, 0xb6, 0x80,
	0x86, 0x36, 0x5e, 0x46, 0x0b, 0x13, 0x56, 0x21, 0x0e, 0x5b, 0x2a, 0x6a, 0x7c, 0xce, 0xe2, 0xb9,
	0x84, 0xbd, 0x75, 0xdb, 0x91, 0x20, 0x48, 0x01, 0x67, 0xed, 0x46, 0x64, 0x69, 0xd2, 0xca, 0xda,
	0x8d, 0x14, 0xc3, 0x0d, 0x55, 0xe0, 0xbf, 0x31, 0xdc, 0x20, 0x02, 0x17, 0x1c, 0x5a, 0x07, 0xa7,
	0x16, 0x80, 0x03, 0x4c, 0x72, 0xa1, 0xe5, 0xca, 0xb9, 0x85, 0xa9, 0xea, 0xc6, 0xe5, 0xaf, 0x2d,
	0x56, 0x6e, 0x6e, 0x86, 0x74, 0xdb, 0x8a, 0xed, 0x89, 0x27, 0x45, 0xc7, 0xfa, 0xd7, 0x39, 0x1b,
	0x2b, 0xae, 0x62, 0xf2, 0x27, 0x88, 0xcc, 0xe0, 0xdc, 0x3e, 0x74, 0x94, 0xe5, 0xf0, 0x93, 0xcc,
	0xe2, 0xf1, 0x36, 0x75, 0x5a, 0xbd, 0xdb, 0x88, 0x17, 0x0f, 0xb2, 0xcb, 0xc8, 0xe0, 0xf8, 0xc6,
	0xa6, 0x1d, 0xc8, 0x84, 0x80, 0x20, 0xac, 0x2b, 0x04, 0x92, 0x6c, 0xe1, 0x7c, 0x33, 0x12, 0xa3,
	0x7a, 0x62, 0xf9, 0xaa, 0x66, 0x2c, 0xc5, 0x63, 0x1c, 0xe0, 0x52, 0x7a, 0xc2, 0xc0, 0xe7, 0x5e,
	0x00, 0xe4, 0x35, 0x9e, 0xe9, 0x31, 0xd7, 0x14, 0xb5, 0x86, 0xa2, 0x42, 0x56, 0x2f, 0x9f, 0xdb,
	0x9a, 0x6e, 0x9e, 0x0f, 0x18, 0x7b, 0xb8, 0xf4, 0x48, 0x00, 0x95, 0x90, 0x44, 0x2a, 0xc3, 0xbd,
	0x91, 0x43, 0xd7, 0x30, 0x72, 0x5f, 0x10, 0x9e, 0x1f, 0x90, 0x4c, 0x99, 0x5d, 0xc1, 0x79, 0x01,
	0x41, 0xcb, 0x91, 0x51, 0xbe, 0xc2, 0xd9, 0x27, 0x22, 0x7e, 0x8f, 0x7e, 0xa7, 0x89, 0x89, 0xac,
	0x08, 0x6d, 0xa9, 0x53, 0xa9, 0xc5, 0x8a, 0x7b, 0xf9, 0x5a, 0x8a, 0x65, 0xe2, 0xd2, 0x63, 0x70,
	0x60, 0x60, 0xb1, 0x12, 0xa3, 0x65, 0xd4, 0xf0, 0xfc, 0x00, 0xfc, 0xe5, 0xfd, 0xc6, 0x44, 0xe7,
	0xfd, 0x56, 0x4f, 0x73, 0xb8, 0x94, 0xe0, 0x5e, 0x13, 0x7c, 0x1f, 0xc4, 0x36, 0x88, 0xb6, 0xcd,
	0x80, 0xbc, 0x47, 0x78, 0x36, 0xad, 0xbd, 0xc8, 0xca, 0x08, 0xf5, 0x18, 0x32, 0x08, 0xc5, 0x87,
	0x57, 0x3e, 0x1f, 0x5b, 0x37, 0x32, 0xe4, 0x03, 0xc2, 0x73, 0xa9, 0xed, 0x40, 0x46, 0x21, 0x1f,
	0xd6, 0xb5, 0xc5, 0xd5, 0xab, 0x13, 0x9c, 0x93, 0x97, 0x7a, 0x7b, 0x23, 0xc9, 0x1b, 0xd6, 0x27,
	0x23, 0xc9, 0x1b, 0xda, 0x38, 0x46, 0x66, 0xed, 0xe0, 0xdb, 0x91, 0x9e, 0x39, 0x39, 0xd2, 0xd1,
	0xe9, 0x91, 0x8e, 0xde, 0x75, 0x75, 0xf4, 0xa9, 0xab, 0xa3, 0xc3, 0xae, 0x8e, 0xbe, 0x76, 0x75,
	0xf4, 0xa3, 0xab, 0xa3, 0x9f, 0x5d, 0x3d, 0x73, 0x12, 0xc6, 0x8f, 0x75, 0x74, 0x78, 0xac, 0xa3,
	0x57, 0x1b, 0x3b, 0xb6, 0xdc, 0x6d, 0xd5, 0xc3, 0xce, 0xaa, 0xd8, 0x82, 0x7b, 0x8c, 0x0b, 0x58,
	0x6c, 0x40, 0xbb, 0xe2, 0xd8, 0x4d, 0x60, 0x1d, 0xe6, 0xc0, 0xa2, 0x4b, 0x3d, 0xba, 0x03, 0xa2,
	0x72, 0xe1, 0xbf, 0x8a, 0x7a, 0x3e, 0xfa, 0xa5, 0xbf, 0xf7, 0x2b, 0x00, 0x00, 0xff, 0xff, 0xb7,
	0x5f, 0xe9, 0xa4, 0x81, 0x08, 0x00, 0x00,
}

func (this *FirmwarePackage) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*FirmwarePackage)
	if !ok {
		that2, ok := that.(FirmwarePackage)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if c := this.Metadata.Compare(that1.Metadata); c != 0 {
		return c
	}
	if c := this.Spec.Compare(that1.Spec); c != 0 {
		return c
	}
	if c := bytes.Compare(this.XXX_unrecognized, that1.XXX_unrecognized); c != 0 {
		return c
	}
	return 0
}
func (this *FirmwarePackageSpec) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*FirmwarePackageSpec)
	if !ok {
		that2, ok := that.(FirmwarePackageSpec)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if c := this.MachineTypeRef.Compare(that1.MachineTypeRef); c != 0 {
		return c
	}
	if this.Name != that1.Name {
		if this.Name < that1.Name {
			return -1
		}
		return 1
	}
	if this.Version != that1.Version {
		if this.Version < that1.Version {
			return -1
		}
		return 1
	}
	if this.Source != that1.Source {
		if this.Source < that1.Source {
			return -1
		}
		return 1
	}
	if this.RebootRequired != that1.RebootRequired {
		if !this.RebootRequired {
			return -1
		}
		return 1
	}
	if c := bytes.Compare(this.XXX_unrecognized, that1.XXX_unrecognized); c != 0 {
		return c
	}
	return 0
}
func (this *FirmwarePackageFilter) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*FirmwarePackageFilter)
	if !ok {
		that2, ok := that.(FirmwarePackageFilter)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if this.Id != that1.Id {
		if this.Id < that1.Id {
			return -1
		}
		return 1
	}
	if c := this.MachineTypeRed.Compare(that1.MachineTypeRed); c != 0 {
		return c
	}
	if len(this.LabelSelector) != len(that1.LabelSelector) {
		if len(this.LabelSelector) < len(that1.LabelSelector) {
			return -1
		}
		return 1
	}
	for i := range this.LabelSelector {
		if this.LabelSelector[i] != that1.LabelSelector[i] {
			if this.LabelSelector[i] < that1.LabelSelector[i] {
				return -1
			}
			return 1
		}
	}
	if c := bytes.Compare(this.XXX_unrecognized, that1.XXX_unrecognized); c != 0 {
		return c
	}
	return 0
}
func (this *ListFirmwarePackagesRequest) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*ListFirmwarePackagesRequest)
	if !ok {
		that2, ok := that.(ListFirmwarePackagesRequest)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if c := this.Filter.Compare(that1.Filter); c != 0 {
		return c
	}
	if c := bytes.Compare(this.XXX_unrecognized, that1.XXX_unrecognized); c != 0 {
		return c
	}
	return 0
}
func (this *ListFirmwarePackagesResponse) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*ListFirmwarePackagesResponse)
	if !ok {
		that2, ok := that.(ListFirmwarePackagesResponse)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if len(this.FirmwarePackage) != len(that1.FirmwarePackage) {
		if len(this.FirmwarePackage) < len(that1.FirmwarePackage) {
			return -1
		}
		return 1
	}
	for i := range this.FirmwarePackage {
		if c := this.FirmwarePackage[i].Compare(that1.FirmwarePackage[i]); c != 0 {
			return c
		}
	}
	if c := bytes.Compare(this.XXX_unrecognized, that1.XXX_unrecognized); c != 0 {
		return c
	}
	return 0
}
func (this *CreateFirmwarePackageRequest) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*CreateFirmwarePackageRequest)
	if !ok {
		that2, ok := that.(CreateFirmwarePackageRequest)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if c := this.Spec.Compare(that1.Spec); c != 0 {
		return c
	}
	if c := bytes.Compare(this.XXX_unrecognized, that1.XXX_unrecognized); c != 0 {
		return c
	}
	return 0
}
func (this *CreateFirmwarePackageResponse) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*CreateFirmwarePackageResponse)
	if !ok {
		that2, ok := that.(CreateFirmwarePackageResponse)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if this.Result != that1.Result {
		if this.Result < that1.Result {
			return -1
		}
		return 1
	}
	if c := this.FirmwarePackage.Compare(that1.FirmwarePackage); c != 0 {
		return c
	}
	if c := bytes.Compare(this.XXX_unrecognized, that1.XXX_unrecognized); c != 0 {
		return c
	}
	return 0
}
func (this *DeleteFirmwarePackageRequest) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*DeleteFirmwarePackageRequest)
	if !ok {
		that2, ok := that.(DeleteFirmwarePackageRequest)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if this.Id != that1.Id {
		if this.Id < that1.Id {
			return -1
		}
		return 1
	}
	if c := bytes.Compare(this.XXX_unrecognized, that1.XXX_unrecognized); c != 0 {
		return c
	}
	return 0
}
func (this *DeleteFirmwarePackageResponse) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*DeleteFirmwarePackageResponse)
	if !ok {
		that2, ok := that.(DeleteFirmwarePackageResponse)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if this.Result != that1.Result {
		if this.Result < that1.Result {
			return -1
		}
		return 1
	}
	if c := bytes.Compare(this.XXX_unrecognized, that1.XXX_unrecognized); c != 0 {
		return c
	}
	return 0
}
func (this *FirmwarePackage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FirmwarePackage)
	if !ok {
		that2, ok := that.(FirmwarePackage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *FirmwarePackageSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FirmwarePackageSpec)
	if !ok {
		that2, ok := that.(FirmwarePackageSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MachineTypeRef.Equal(that1.MachineTypeRef) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.Source != that1.Source {
		return false
	}
	if this.RebootRequired != that1.RebootRequired {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *FirmwarePackageFilter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FirmwarePackageFilter)
	if !ok {
		that2, ok := that.(FirmwarePackageFilter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !this.MachineTypeRed.Equal(that1.MachineTypeRed) {
		return false
	}
	if len(this.LabelSelector) != len(that1.LabelSelector) {
		return false
	}
	for i := range this.LabelSelector {
		if this.LabelSelector[i] != that1.LabelSelector[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ListFirmwarePackagesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListFirmwarePackagesRequest)
	if !ok {
		that2, ok := that.(ListFirmwarePackagesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Filter.Equal(that1.Filter) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ListFirmwarePackagesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListFirmwarePackagesResponse)
	if !ok {
		that2, ok := that.(ListFirmwarePackagesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.FirmwarePackage) != len(that1.FirmwarePackage) {
		return false
	}
	for i := range this.FirmwarePackage {
		if !this.FirmwarePackage[i].Equal(that1.FirmwarePackage[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *CreateFirmwarePackageRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateFirmwarePackageRequest)
	if !ok {
		that2, ok := that.(CreateFirmwarePackageRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *CreateFirmwarePackageResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateFirmwarePackageResponse)
	if !ok {
		that2, ok := that.(CreateFirmwarePackageResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Result != that1.Result {
		return false
	}
	if !this.FirmwarePackage.Equal(that1.FirmwarePackage) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DeleteFirmwarePackageRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteFirmwarePackageRequest)
	if !ok {
		that2, ok := that.(DeleteFirmwarePackageRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DeleteFirmwarePackageResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteFirmwarePackageResponse)
	if !ok {
		that2, ok := that.(DeleteFirmwarePackageResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Result != that1.Result {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *FirmwarePackage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&v1alpha1.FirmwarePackage{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FirmwarePackageSpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&v1alpha1.FirmwarePackageSpec{")
	if this.MachineTypeRef != nil {
		s = append(s, "MachineTypeRef: "+fmt.Sprintf("%#v", this.MachineTypeRef)+",\n")
	}
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "Source: "+fmt.Sprintf("%#v", this.Source)+",\n")
	s = append(s, "RebootRequired: "+fmt.Sprintf("%#v", this.RebootRequired)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FirmwarePackageFilter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&v1alpha1.FirmwarePackageFilter{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.MachineTypeRed != nil {
		s = append(s, "MachineTypeRed: "+fmt.Sprintf("%#v", this.MachineTypeRed)+",\n")
	}
	keysForLabelSelector := make([]string, 0, len(this.LabelSelector))
	for k, _ := range this.LabelSelector {
		keysForLabelSelector = append(keysForLabelSelector, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabelSelector)
	mapStringForLabelSelector := "map[string]string{"
	for _, k := range keysForLabelSelector {
		mapStringForLabelSelector += fmt.Sprintf("%#v: %#v,", k, this.LabelSelector[k])
	}
	mapStringForLabelSelector += "}"
	if this.LabelSelector != nil {
		s = append(s, "LabelSelector: "+mapStringForLabelSelector+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListFirmwarePackagesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&v1alpha1.ListFirmwarePackagesRequest{")
	if this.Filter != nil {
		s = append(s, "Filter: "+fmt.Sprintf("%#v", this.Filter)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListFirmwarePackagesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&v1alpha1.ListFirmwarePackagesResponse{")
	if this.FirmwarePackage != nil {
		s = append(s, "FirmwarePackage: "+fmt.Sprintf("%#v", this.FirmwarePackage)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateFirmwarePackageRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&v1alpha1.CreateFirmwarePackageRequest{")
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateFirmwarePackageResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&v1alpha1.CreateFirmwarePackageResponse{")
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	if this.FirmwarePackage != nil {
		s = append(s, "FirmwarePackage: "+fmt.Sprintf("%#v", this.FirmwarePackage)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteFirmwarePackageRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&v1alpha1.DeleteFirmwarePackageRequest{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteFirmwarePackageResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&v1alpha1.DeleteFirmwarePackageResponse{")
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringApi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FirmwarePackageBrokerServiceClient is the client API for FirmwarePackageBrokerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FirmwarePackageBrokerServiceClient interface {
	ListFirmwarePackages(ctx context.Context, in *ListFirmwarePackagesRequest, opts ...grpc.CallOption) (*ListFirmwarePackagesResponse, error)
	CreateFirmwarePackage(ctx context.Context, in *CreateFirmwarePackageRequest, opts ...grpc.CallOption) (*CreateFirmwarePackageResponse, error)
	DeleteFirmwarePackage(ctx context.Context, in *DeleteFirmwarePackageRequest, opts ...grpc.CallOption) (*DeleteFirmwarePackageResponse, error)
}

type firmwarePackageBrokerServiceClient struct {
	cc *grpc.ClientConn
}

func NewFirmwarePackageBrokerServiceClient(cc *grpc.ClientConn) FirmwarePackageBrokerServiceClient {
	return &firmwarePackageBrokerServiceClient{cc}
}

func (c *firmwarePackageBrokerServiceClient) ListFirmwarePackages(ctx context.Context, in *ListFirmwarePackagesRequest, opts ...grpc.CallOption) (*ListFirmwarePackagesResponse, error) {
	out := new(ListFirmwarePackagesResponse)
	err := c.cc.Invoke(ctx, "/lcmi.api.firmwarepackage.v1alpha1.FirmwarePackageBrokerService/ListFirmwarePackages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firmwarePackageBrokerServiceClient) CreateFirmwarePackage(ctx context.Context, in *CreateFirmwarePackageRequest, opts ...grpc.CallOption) (*CreateFirmwarePackageResponse, error) {
	out := new(CreateFirmwarePackageResponse)
	err := c.cc.Invoke(ctx, "/lcmi.api.firmwarepackage.v1alpha1.FirmwarePackageBrokerService/CreateFirmwarePackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firmwarePackageBrokerServiceClient) DeleteFirmwarePackage(ctx context.Context, in *DeleteFirmwarePackageRequest, opts ...grpc.CallOption) (*DeleteFirmwarePackageResponse, error) {
	out := new(DeleteFirmwarePackageResponse)
	err := c.cc.Invoke(ctx, "/lcmi.api.firmwarepackage.v1alpha1.FirmwarePackageBrokerService/DeleteFirmwarePackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FirmwarePackageBrokerServiceServer is the server API for FirmwarePackageBrokerService service.
type FirmwarePackageBrokerServiceServer interface {
	ListFirmwarePackages(context.Context, *ListFirmwarePackagesRequest) (*ListFirmwarePackagesResponse, error)
	CreateFirmwarePackage(context.Context, *CreateFirmwarePackageRequest) (*CreateFirmwarePackageResponse, error)
	DeleteFirmwarePackage(context.Context, *DeleteFirmwarePackageRequest) (*DeleteFirmwarePackageResponse, error)
}

// UnimplementedFirmwarePackageBrokerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFirmwarePackageBrokerServiceServer struct {
}

func (*UnimplementedFirmwarePackageBrokerServiceServer) ListFirmwarePackages(ctx context.Context, req *ListFirmwarePackagesRequest) (*ListFirmwarePackagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFirmwarePackages not implemented")
}
func (*UnimplementedFirmwarePackageBrokerServiceServer) CreateFirmwarePackage(ctx context.Context, req *CreateFirmwarePackageRequest) (*CreateFirmwarePackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFirmwarePackage not implemented")
}
func (*UnimplementedFirmwarePackageBrokerServiceServer) DeleteFirmwarePackage(ctx context.Context, req *DeleteFirmwarePackageRequest) (*DeleteFirmwarePackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFirmwarePackage not implemented")
}

func RegisterFirmwarePackageBrokerServiceServer(s *grpc.Server, srv FirmwarePackageBrokerServiceServer) {
	s.RegisterService(&_FirmwarePackageBrokerService_serviceDesc, srv)
}

func _FirmwarePackageBrokerService_ListFirmwarePackages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFirmwarePackagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirmwarePackageBrokerServiceServer).ListFirmwarePackages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lcmi.api.firmwarepackage.v1alpha1.FirmwarePackageBrokerService/ListFirmwarePackages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirmwarePackageBrokerServiceServer).ListFirmwarePackages(ctx, req.(*ListFirmwarePackagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FirmwarePackageBrokerService_CreateFirmwarePackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFirmwarePackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirmwarePackageBrokerServiceServer).CreateFirmwarePackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lcmi.api.firmwarepackage.v1alpha1.FirmwarePackageBrokerService/CreateFirmwarePackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirmwarePackageBrokerServiceServer).CreateFirmwarePackage(ctx, req.(*CreateFirmwarePackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FirmwarePackageBrokerService_DeleteFirmwarePackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFirmwarePackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirmwarePackageBrokerServiceServer).DeleteFirmwarePackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lcmi.api.firmwarepackage.v1alpha1.FirmwarePackageBrokerService/DeleteFirmwarePackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirmwarePackageBrokerServiceServer).DeleteFirmwarePackage(ctx, req.(*DeleteFirmwarePackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FirmwarePackageBrokerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lcmi.api.firmwarepackage.v1alpha1.FirmwarePackageBrokerService",
	HandlerType: (*FirmwarePackageBrokerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListFirmwarePackages",
			Handler:    _FirmwarePackageBrokerService_ListFirmwarePackages_Handler,
		},
		{
			MethodName: "CreateFirmwarePackage",
			Handler:    _FirmwarePackageBrokerService_CreateFirmwarePackage_Handler,
		},
		{
			MethodName: "DeleteFirmwarePackage",
			Handler:    _FirmwarePackageBrokerService_DeleteFirmwarePackage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lcmi/api/firmwarepackage/v1alpha1/api.proto",
}

func (m *FirmwarePackage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FirmwarePackage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FirmwarePackage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FirmwarePackageSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FirmwarePackageSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FirmwarePackageSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RebootRequired {
		i--
		if m.RebootRequired {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.MachineTypeRef != nil {
		{
			size, err := m.MachineTypeRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FirmwarePackageFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FirmwarePackageFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FirmwarePackageFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LabelSelector) > 0 {
		for k := range m.LabelSelector {
			v := m.LabelSelector[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintApi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.MachineTypeRed != nil {
		{
			size, err := m.MachineTypeRed.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListFirmwarePackagesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListFirmwarePackagesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListFirmwarePackagesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Filter != nil {
		{
			size, err := m.Filter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListFirmwarePackagesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListFirmwarePackagesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListFirmwarePackagesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FirmwarePackage) > 0 {
		for iNdEx := len(m.FirmwarePackage) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FirmwarePackage[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateFirmwarePackageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateFirmwarePackageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateFirmwarePackageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateFirmwarePackageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateFirmwarePackageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateFirmwarePackageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FirmwarePackage != nil {
		{
			size, err := m.FirmwarePackage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Result != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Result))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteFirmwarePackageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteFirmwarePackageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteFirmwarePackageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteFirmwarePackageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteFirmwarePackageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteFirmwarePackageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Result != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Result))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedFirmwarePackage(r randyApi, easy bool) *FirmwarePackage {
	this := &FirmwarePackage{}
	if r.Intn(5) != 0 {
		this.Metadata = v1alpha1.NewPopulatedObjectMetadata(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Spec = NewPopulatedFirmwarePackageSpec(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedApi(r, 3)
	}
	return this
}

func NewPopulatedFirmwarePackageSpec(r randyApi, easy bool) *FirmwarePackageSpec {
	this := &FirmwarePackageSpec{}
	if r.Intn(5) != 0 {
		this.MachineTypeRef = v1alpha1.NewPopulatedLocalObjectReference(r, easy)
	}
	this.Name = string(randStringApi(r))
	this.Version = string(randStringApi(r))
	this.Source = string(randStringApi(r))
	this.RebootRequired = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedApi(r, 6)
	}
	return this
}

func NewPopulatedFirmwarePackageFilter(r randyApi, easy bool) *FirmwarePackageFilter {
	this := &FirmwarePackageFilter{}
	this.Id = string(randStringApi(r))
	if r.Intn(5) != 0 {
		this.MachineTypeRed = v1alpha1.NewPopulatedLocalObjectReference(r, easy)
	}
	if r.Intn(5) != 0 {
		v1 := r.Intn(10)
		this.LabelSelector = make(map[string]string)
		for i := 0; i < v1; i++ {
			this.LabelSelector[randStringApi(r)] = randStringApi(r)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedApi(r, 4)
	}
	return this
}

func NewPopulatedListFirmwarePackagesRequest(r randyApi, easy bool) *ListFirmwarePackagesRequest {
	this := &ListFirmwarePackagesRequest{}
	if r.Intn(5) != 0 {
		this.Filter = NewPopulatedFirmwarePackageFilter(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedApi(r, 2)
	}
	return this
}

func NewPopulatedListFirmwarePackagesResponse(r randyApi, easy bool) *ListFirmwarePackagesResponse {
	this := &ListFirmwarePackagesResponse{}
	if r.Intn(5) != 0 {
		v2 := r.Intn(5)
		this.FirmwarePackage = make([]*FirmwarePackage, v2)
		for i := 0; i < v2; i++ {
			this.FirmwarePackage[i] = NewPopulatedFirmwarePackage(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedApi(r, 2)
	}
	return this
}

func NewPopulatedCreateFirmwarePackageRequest(r randyApi, easy bool) *CreateFirmwarePackageRequest {
	this := &CreateFirmwarePackageRequest{}
	if r.Intn(5) != 0 {
		this.Spec = NewPopulatedFirmwarePackageSpec(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedApi(r, 2)
	}
	return this
}

func NewPopulatedCreateFirmwarePackageResponse(r randyApi, easy bool) *CreateFirmwarePackageResponse {
	this := &CreateFirmwarePackageResponse{}
	this.Result = v1alpha11.CreateResult([]int32{0, 1, 2, 3}[r.Intn(4)])
	if r.Intn(5) != 0 {
		this.FirmwarePackage = NewPopulatedFirmwarePackage(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedApi(r, 3)
	}
	return this
}

func NewPopulatedDeleteFirmwarePackageRequest(r randyApi, easy bool) *DeleteFirmwarePackageRequest {
	this := &DeleteFirmwarePackageRequest{}
	this.Id = string(randStringApi(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedApi(r, 2)
	}
	return this
}

func NewPopulatedDeleteFirmwarePackageResponse(r randyApi, easy bool) *DeleteFirmwarePackageResponse {
	this := &DeleteFirmwarePackageResponse{}
	this.Result = v1alpha11.DeleteResult([]int32{0, 1, 2, 3}[r.Intn(4)])
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedApi(r, 2)
	}
	return this
}

type randyApi interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneApi(r randyApi) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringApi(r randyApi) string {
	v3 := r.Intn(100)
	tmps := make([]rune, v3)
	for i := 0; i < v3; i++ {
		tmps[i] = randUTF8RuneApi(r)
	}
	return string(tmps)
}
func randUnrecognizedApi(r randyApi, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldApi(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldApi(dAtA []byte, r randyApi, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateApi(dAtA, uint64(key))
		v4 := r.Int63()
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		dAtA = encodeVarintPopulateApi(dAtA, uint64(v4))
	case 1:
		dAtA = encodeVarintPopulateApi(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateApi(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateApi(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateApi(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateApi(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *FirmwarePackage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FirmwarePackageSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MachineTypeRef != nil {
		l = m.MachineTypeRef.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.RebootRequired {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FirmwarePackageFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.MachineTypeRed != nil {
		l = m.MachineTypeRed.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.LabelSelector) > 0 {
		for k, v := range m.LabelSelector {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + len(v) + sovApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListFirmwarePackagesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListFirmwarePackagesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FirmwarePackage) > 0 {
		for _, e := range m.FirmwarePackage {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateFirmwarePackageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateFirmwarePackageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovApi(uint64(m.Result))
	}
	if m.FirmwarePackage != nil {
		l = m.FirmwarePackage.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteFirmwarePackageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteFirmwarePackageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovApi(uint64(m.Result))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *FirmwarePackage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FirmwarePackage{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "ObjectMetadata", "v1alpha1.ObjectMetadata", 1) + `,`,
		`Spec:` + strings.Replace(this.Spec.String(), "FirmwarePackageSpec", "FirmwarePackageSpec", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FirmwarePackageSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FirmwarePackageSpec{`,
		`MachineTypeRef:` + strings.Replace(fmt.Sprintf("%v", this.MachineTypeRef), "LocalObjectReference", "v1alpha1.LocalObjectReference", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Source:` + fmt.Sprintf("%v", this.Source) + `,`,
		`RebootRequired:` + fmt.Sprintf("%v", this.RebootRequired) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FirmwarePackageFilter) String() string {
	if this == nil {
		return "nil"
	}
	keysForLabelSelector := make([]string, 0, len(this.LabelSelector))
	for k, _ := range this.LabelSelector {
		keysForLabelSelector = append(keysForLabelSelector, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabelSelector)
	mapStringForLabelSelector := "map[string]string{"
	for _, k := range keysForLabelSelector {
		mapStringForLabelSelector += fmt.Sprintf("%v: %v,", k, this.LabelSelector[k])
	}
	mapStringForLabelSelector += "}"
	s := strings.Join([]string{`&FirmwarePackageFilter{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`MachineTypeRed:` + strings.Replace(fmt.Sprintf("%v", this.MachineTypeRed), "LocalObjectReference", "v1alpha1.LocalObjectReference", 1) + `,`,
		`LabelSelector:` + mapStringForLabelSelector + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListFirmwarePackagesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListFirmwarePackagesRequest{`,
		`Filter:` + strings.Replace(this.Filter.String(), "FirmwarePackageFilter", "FirmwarePackageFilter", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListFirmwarePackagesResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFirmwarePackage := "[]*FirmwarePackage{"
	for _, f := range this.FirmwarePackage {
		repeatedStringForFirmwarePackage += strings.Replace(f.String(), "FirmwarePackage", "FirmwarePackage", 1) + ","
	}
	repeatedStringForFirmwarePackage += "}"
	s := strings.Join([]string{`&ListFirmwarePackagesResponse{`,
		`FirmwarePackage:` + repeatedStringForFirmwarePackage + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateFirmwarePackageRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateFirmwarePackageRequest{`,
		`Spec:` + strings.Replace(this.Spec.String(), "FirmwarePackageSpec", "FirmwarePackageSpec", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateFirmwarePackageResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateFirmwarePackageResponse{`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`FirmwarePackage:` + strings.Replace(this.FirmwarePackage.String(), "FirmwarePackage", "FirmwarePackage", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteFirmwarePackageRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteFirmwarePackageRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteFirmwarePackageResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteFirmwarePackageResponse{`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringApi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *FirmwarePackage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FirmwarePackage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FirmwarePackage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &v1alpha1.ObjectMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &FirmwarePackageSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FirmwarePackageSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FirmwarePackageSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FirmwarePackageSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineTypeRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MachineTypeRef == nil {
				m.MachineTypeRef = &v1alpha1.LocalObjectReference{}
			}
			if err := m.MachineTypeRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RebootRequired", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RebootRequired = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FirmwarePackageFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FirmwarePackageFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FirmwarePackageFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineTypeRed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MachineTypeRed == nil {
				m.MachineTypeRed = &v1alpha1.LocalObjectReference{}
			}
			if err := m.MachineTypeRed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LabelSelector == nil {
				m.LabelSelector = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.LabelSelector[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListFirmwarePackagesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListFirmwarePackagesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListFirmwarePackagesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &FirmwarePackageFilter{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListFirmwarePackagesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListFirmwarePackagesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListFirmwarePackagesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirmwarePackage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirmwarePackage = append(m.FirmwarePackage, &FirmwarePackage{})
			if err := m.FirmwarePackage[len(m.FirmwarePackage)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateFirmwarePackageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateFirmwarePackageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateFirmwarePackageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &FirmwarePackageSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateFirmwarePackageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateFirmwarePackageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateFirmwarePackageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= v1alpha11.CreateResult(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirmwarePackage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FirmwarePackage == nil {
				m.FirmwarePackage = &FirmwarePackage{}
			}
			if err := m.FirmwarePackage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteFirmwarePackageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteFirmwarePackageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteFirmwarePackageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteFirmwarePackageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteFirmwarePackageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteFirmwarePackageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= v1alpha11.DeleteResult(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
