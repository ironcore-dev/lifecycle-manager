// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: machinetype/v1alpha1/api.proto

package v1alpha1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MachineTypeService_ListMachineTypes_FullMethodName  = "/machinetype.v1alpha1.MachineTypeService/ListMachineTypes"
	MachineTypeService_Scan_FullMethodName              = "/machinetype.v1alpha1.MachineTypeService/Scan"
	MachineTypeService_UpdateMachineType_FullMethodName = "/machinetype.v1alpha1.MachineTypeService/UpdateMachineType"
)

// MachineTypeServiceClient is the client API for MachineTypeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MachineTypeServiceClient interface {
	ListMachineTypes(ctx context.Context, in *ListMachineTypesRequest, opts ...grpc.CallOption) (*ListMachineTypesResponse, error)
	Scan(ctx context.Context, in *ScanRequest, opts ...grpc.CallOption) (*ScanResponse, error)
	UpdateMachineType(ctx context.Context, in *UpdateMachineTypeRequest, opts ...grpc.CallOption) (*UpdateMachineTypeResponse, error)
}

type machineTypeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMachineTypeServiceClient(cc grpc.ClientConnInterface) MachineTypeServiceClient {
	return &machineTypeServiceClient{cc}
}

func (c *machineTypeServiceClient) ListMachineTypes(ctx context.Context, in *ListMachineTypesRequest, opts ...grpc.CallOption) (*ListMachineTypesResponse, error) {
	out := new(ListMachineTypesResponse)
	err := c.cc.Invoke(ctx, MachineTypeService_ListMachineTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineTypeServiceClient) Scan(ctx context.Context, in *ScanRequest, opts ...grpc.CallOption) (*ScanResponse, error) {
	out := new(ScanResponse)
	err := c.cc.Invoke(ctx, MachineTypeService_Scan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineTypeServiceClient) UpdateMachineType(ctx context.Context, in *UpdateMachineTypeRequest, opts ...grpc.CallOption) (*UpdateMachineTypeResponse, error) {
	out := new(UpdateMachineTypeResponse)
	err := c.cc.Invoke(ctx, MachineTypeService_UpdateMachineType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MachineTypeServiceServer is the server API for MachineTypeService service.
// All implementations must embed UnimplementedMachineTypeServiceServer
// for forward compatibility
type MachineTypeServiceServer interface {
	ListMachineTypes(context.Context, *ListMachineTypesRequest) (*ListMachineTypesResponse, error)
	Scan(context.Context, *ScanRequest) (*ScanResponse, error)
	UpdateMachineType(context.Context, *UpdateMachineTypeRequest) (*UpdateMachineTypeResponse, error)
	mustEmbedUnimplementedMachineTypeServiceServer()
}

// UnimplementedMachineTypeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMachineTypeServiceServer struct {
}

func (UnimplementedMachineTypeServiceServer) ListMachineTypes(context.Context, *ListMachineTypesRequest) (*ListMachineTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMachineTypes not implemented")
}
func (UnimplementedMachineTypeServiceServer) Scan(context.Context, *ScanRequest) (*ScanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Scan not implemented")
}
func (UnimplementedMachineTypeServiceServer) UpdateMachineType(context.Context, *UpdateMachineTypeRequest) (*UpdateMachineTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMachineType not implemented")
}
func (UnimplementedMachineTypeServiceServer) mustEmbedUnimplementedMachineTypeServiceServer() {}

// UnsafeMachineTypeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MachineTypeServiceServer will
// result in compilation errors.
type UnsafeMachineTypeServiceServer interface {
	mustEmbedUnimplementedMachineTypeServiceServer()
}

func RegisterMachineTypeServiceServer(s grpc.ServiceRegistrar, srv MachineTypeServiceServer) {
	s.RegisterService(&MachineTypeService_ServiceDesc, srv)
}

func _MachineTypeService_ListMachineTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMachineTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineTypeServiceServer).ListMachineTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MachineTypeService_ListMachineTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineTypeServiceServer).ListMachineTypes(ctx, req.(*ListMachineTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineTypeService_Scan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineTypeServiceServer).Scan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MachineTypeService_Scan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineTypeServiceServer).Scan(ctx, req.(*ScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineTypeService_UpdateMachineType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMachineTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineTypeServiceServer).UpdateMachineType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MachineTypeService_UpdateMachineType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineTypeServiceServer).UpdateMachineType(ctx, req.(*UpdateMachineTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MachineTypeService_ServiceDesc is the grpc.ServiceDesc for MachineTypeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MachineTypeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "machinetype.v1alpha1.MachineTypeService",
	HandlerType: (*MachineTypeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListMachineTypes",
			Handler:    _MachineTypeService_ListMachineTypes_Handler,
		},
		{
			MethodName: "Scan",
			Handler:    _MachineTypeService_Scan_Handler,
		},
		{
			MethodName: "UpdateMachineType",
			Handler:    _MachineTypeService_UpdateMachineType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "machinetype/v1alpha1/api.proto",
}
