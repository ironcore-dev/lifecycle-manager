// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lcmi/api/common/v1alpha1/api.proto

package v1alpha1

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	math "math"
	strconv "strconv"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ScanResult int32

const (
	ScanResult_SCAN_RESULT_UNSPECIFIED ScanResult = 0
	ScanResult_SCAN_RESULT_SUCCESS     ScanResult = 1
	ScanResult_SCAN_RESULT_FAILURE     ScanResult = 2
)

var ScanResult_name = map[int32]string{
	0: "SCAN_RESULT_UNSPECIFIED",
	1: "SCAN_RESULT_SUCCESS",
	2: "SCAN_RESULT_FAILURE",
}

var ScanResult_value = map[string]int32{
	"SCAN_RESULT_UNSPECIFIED": 0,
	"SCAN_RESULT_SUCCESS":     1,
	"SCAN_RESULT_FAILURE":     2,
}

func (ScanResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_81f73a66ad158c5a, []int{0}
}

type ScanState int32

const (
	ScanState_SCAN_STATE_UNSPECIFIED ScanState = 0
	ScanState_SCAN_STATE_SCHEDULED   ScanState = 1
	ScanState_SCAN_STATE_FINISHED    ScanState = 2
)

var ScanState_name = map[int32]string{
	0: "SCAN_STATE_UNSPECIFIED",
	1: "SCAN_STATE_SCHEDULED",
	2: "SCAN_STATE_FINISHED",
}

var ScanState_value = map[string]int32{
	"SCAN_STATE_UNSPECIFIED": 0,
	"SCAN_STATE_SCHEDULED":   1,
	"SCAN_STATE_FINISHED":    2,
}

func (ScanState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_81f73a66ad158c5a, []int{1}
}

func init() {
	proto.RegisterEnum("lcmi.api.common.v1alpha1.ScanResult", ScanResult_name, ScanResult_value)
	proto.RegisterEnum("lcmi.api.common.v1alpha1.ScanState", ScanState_name, ScanState_value)
}

func init() {
	proto.RegisterFile("lcmi/api/common/v1alpha1/api.proto", fileDescriptor_81f73a66ad158c5a)
}

var fileDescriptor_81f73a66ad158c5a = []byte{
	// 291 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xb1, 0x6a, 0xeb, 0x30,
	0x18, 0x46, 0xa3, 0x0c, 0x17, 0xae, 0x26, 0xe3, 0x96, 0x26, 0xb4, 0xa0, 0xa1, 0x63, 0x20, 0x16,
	0xa1, 0x4f, 0xe0, 0xd8, 0x32, 0x31, 0x18, 0x53, 0x2c, 0x7b, 0x49, 0x87, 0xa0, 0xa8, 0x6a, 0x62,
	0xb0, 0x2d, 0xe3, 0x2a, 0x81, 0x6e, 0x7d, 0x9c, 0x3e, 0x4a, 0xc6, 0x8e, 0x1d, 0x6b, 0x65, 0xe9,
	0x98, 0xb1, 0x63, 0x51, 0x42, 0xc1, 0x04, 0x3a, 0xfe, 0xff, 0x39, 0x7c, 0xc3, 0x81, 0xb7, 0x05,
	0x2f, 0x73, 0xcc, 0xea, 0x1c, 0x73, 0x59, 0x96, 0xb2, 0xc2, 0xdb, 0x09, 0x2b, 0xea, 0x35, 0x9b,
	0x98, 0x9f, 0x53, 0x37, 0x52, 0x49, 0x7b, 0x68, 0x1c, 0xc7, 0xdc, 0x27, 0xc7, 0xf9, 0x75, 0x46,
	0x0f, 0x10, 0x52, 0xce, 0xaa, 0x44, 0x3c, 0x6f, 0x0a, 0x65, 0xdf, 0xc0, 0x01, 0xf5, 0xdc, 0x78,
	0x91, 0x10, 0x9a, 0x45, 0xe9, 0x22, 0x8b, 0xe9, 0x3d, 0xf1, 0xc2, 0x20, 0x24, 0xbe, 0xd5, 0xb3,
	0x07, 0xf0, 0xa2, 0x0b, 0x69, 0xe6, 0x79, 0x84, 0x52, 0x0b, 0x9c, 0x83, 0xc0, 0x0d, 0xa3, 0x2c,
	0x21, 0x56, 0x7f, 0x34, 0x87, 0xff, 0xcd, 0x38, 0x55, 0x4c, 0x09, 0xfb, 0x1a, 0x5e, 0x1d, 0x2d,
	0x9a, 0xba, 0x29, 0x39, 0x9b, 0x1e, 0xc2, 0xcb, 0x0e, 0xa3, 0xde, 0x8c, 0xf8, 0x59, 0x44, 0xfc,
	0xce, 0xf6, 0x89, 0x04, 0x61, 0x1c, 0xd2, 0x19, 0xf1, 0xad, 0xfe, 0x54, 0x7d, 0xb4, 0xa8, 0x77,
	0x68, 0x11, 0xf8, 0x6e, 0x11, 0x78, 0xd5, 0x08, 0xbc, 0x69, 0x04, 0x76, 0x1a, 0x81, 0x77, 0x8d,
	0xc0, 0xa7, 0x46, 0xe0, 0x4b, 0xa3, 0xde, 0xc1, 0xfc, 0xf7, 0x08, 0xec, 0xf6, 0x08, 0xcc, 0xa7,
	0xab, 0x5c, 0xad, 0x37, 0x4b, 0x93, 0x00, 0xe7, 0x8d, 0xac, 0xb8, 0x6c, 0xc4, 0xf8, 0x51, 0x6c,
	0x71, 0x91, 0x3f, 0x09, 0xfe, 0xc2, 0x0b, 0x31, 0x2e, 0x59, 0xc5, 0x56, 0xa2, 0xc1, 0x7f, 0x25,
	0x5d, 0xfe, 0x3b, 0xf6, 0xbc, 0xfb, 0x09, 0x00, 0x00, 0xff, 0xff, 0x19, 0xe7, 0xf4, 0xe9, 0x75,
	0x01, 0x00, 0x00,
}

func (x ScanResult) String() string {
	s, ok := ScanResult_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ScanState) String() string {
	s, ok := ScanState_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
