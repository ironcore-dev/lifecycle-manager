// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lcmi/api/machine_lifecycle/v1alpha1/api.proto

package v1alpha1

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	v1alpha11 "github.com/ironcore-dev/lifecycle-manager/lcmi/api/common/v1alpha1"
	v1alpha1 "github.com/ironcore-dev/lifecycle-manager/lcmi/api/meta/v1alpha1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MachineLifecycle struct {
	Metadata             *v1alpha1.ObjectMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec                 *MachineLifecycleSpec    `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	Status               *MachineLifecycleStatus  `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *MachineLifecycle) Reset()      { *m = MachineLifecycle{} }
func (*MachineLifecycle) ProtoMessage() {}
func (*MachineLifecycle) Descriptor() ([]byte, []int) {
	return fileDescriptor_916165098a09e24c, []int{0}
}
func (m *MachineLifecycle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MachineLifecycle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MachineLifecycle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MachineLifecycle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MachineLifecycle.Merge(m, src)
}
func (m *MachineLifecycle) XXX_Size() int {
	return m.Size()
}
func (m *MachineLifecycle) XXX_DiscardUnknown() {
	xxx_messageInfo_MachineLifecycle.DiscardUnknown(m)
}

var xxx_messageInfo_MachineLifecycle proto.InternalMessageInfo

func (m *MachineLifecycle) GetMetadata() *v1alpha1.ObjectMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *MachineLifecycle) GetSpec() *MachineLifecycleSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *MachineLifecycle) GetStatus() *MachineLifecycleStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (*MachineLifecycle) XXX_MessageName() string {
	return "lcmi.api.machine_lifecycle.v1alpha1.MachineLifecycle"
}

type MachineLifecycleSpec struct {
	MachineTypeRef       *v1alpha1.LocalObjectReference `protobuf:"bytes,1,opt,name=machine_type_ref,json=machineTypeRef,proto3" json:"machine_type_ref,omitempty"`
	OobMachineRef        *v1alpha1.LocalObjectReference `protobuf:"bytes,2,opt,name=oob_machine_ref,json=oobMachineRef,proto3" json:"oob_machine_ref,omitempty"`
	ScanPeriod           int64                          `protobuf:"varint,3,opt,name=scan_period,json=scanPeriod,proto3" json:"scan_period,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *MachineLifecycleSpec) Reset()      { *m = MachineLifecycleSpec{} }
func (*MachineLifecycleSpec) ProtoMessage() {}
func (*MachineLifecycleSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_916165098a09e24c, []int{1}
}
func (m *MachineLifecycleSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MachineLifecycleSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MachineLifecycleSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MachineLifecycleSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MachineLifecycleSpec.Merge(m, src)
}
func (m *MachineLifecycleSpec) XXX_Size() int {
	return m.Size()
}
func (m *MachineLifecycleSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_MachineLifecycleSpec.DiscardUnknown(m)
}

var xxx_messageInfo_MachineLifecycleSpec proto.InternalMessageInfo

func (m *MachineLifecycleSpec) GetMachineTypeRef() *v1alpha1.LocalObjectReference {
	if m != nil {
		return m.MachineTypeRef
	}
	return nil
}

func (m *MachineLifecycleSpec) GetOobMachineRef() *v1alpha1.LocalObjectReference {
	if m != nil {
		return m.OobMachineRef
	}
	return nil
}

func (m *MachineLifecycleSpec) GetScanPeriod() int64 {
	if m != nil {
		return m.ScanPeriod
	}
	return 0
}

func (*MachineLifecycleSpec) XXX_MessageName() string {
	return "lcmi.api.machine_lifecycle.v1alpha1.MachineLifecycleSpec"
}

type MachineLifecycleStatus struct {
	LastScanTime         int64                            `protobuf:"varint,1,opt,name=last_scan_time,json=lastScanTime,proto3" json:"last_scan_time,omitempty"`
	LastScanResult       v1alpha11.ScanResult             `protobuf:"varint,2,opt,name=last_scan_result,json=lastScanResult,proto3,enum=lcmi.api.common.v1alpha1.ScanResult" json:"last_scan_result,omitempty"`
	InstalledPackages    []*v1alpha1.LocalObjectReference `protobuf:"bytes,3,rep,name=installed_packages,json=installedPackages,proto3" json:"installed_packages,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *MachineLifecycleStatus) Reset()      { *m = MachineLifecycleStatus{} }
func (*MachineLifecycleStatus) ProtoMessage() {}
func (*MachineLifecycleStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_916165098a09e24c, []int{2}
}
func (m *MachineLifecycleStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MachineLifecycleStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MachineLifecycleStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MachineLifecycleStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MachineLifecycleStatus.Merge(m, src)
}
func (m *MachineLifecycleStatus) XXX_Size() int {
	return m.Size()
}
func (m *MachineLifecycleStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_MachineLifecycleStatus.DiscardUnknown(m)
}

var xxx_messageInfo_MachineLifecycleStatus proto.InternalMessageInfo

func (m *MachineLifecycleStatus) GetLastScanTime() int64 {
	if m != nil {
		return m.LastScanTime
	}
	return 0
}

func (m *MachineLifecycleStatus) GetLastScanResult() v1alpha11.ScanResult {
	if m != nil {
		return m.LastScanResult
	}
	return v1alpha11.ScanResult_SCAN_RESULT_UNSPECIFIED
}

func (m *MachineLifecycleStatus) GetInstalledPackages() []*v1alpha1.LocalObjectReference {
	if m != nil {
		return m.InstalledPackages
	}
	return nil
}

func (*MachineLifecycleStatus) XXX_MessageName() string {
	return "lcmi.api.machine_lifecycle.v1alpha1.MachineLifecycleStatus"
}

type MachineLifecycleFilter struct {
	Id                   string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	LabelSelector        map[string]string `protobuf:"bytes,2,rep,name=label_selector,json=labelSelector,proto3" json:"label_selector,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *MachineLifecycleFilter) Reset()      { *m = MachineLifecycleFilter{} }
func (*MachineLifecycleFilter) ProtoMessage() {}
func (*MachineLifecycleFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_916165098a09e24c, []int{3}
}
func (m *MachineLifecycleFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MachineLifecycleFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MachineLifecycleFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MachineLifecycleFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MachineLifecycleFilter.Merge(m, src)
}
func (m *MachineLifecycleFilter) XXX_Size() int {
	return m.Size()
}
func (m *MachineLifecycleFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_MachineLifecycleFilter.DiscardUnknown(m)
}

var xxx_messageInfo_MachineLifecycleFilter proto.InternalMessageInfo

func (m *MachineLifecycleFilter) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MachineLifecycleFilter) GetLabelSelector() map[string]string {
	if m != nil {
		return m.LabelSelector
	}
	return nil
}

func (*MachineLifecycleFilter) XXX_MessageName() string {
	return "lcmi.api.machine_lifecycle.v1alpha1.MachineLifecycleFilter"
}

type ListMachineLifecyclesRequest struct {
	Filter               *MachineLifecycleFilter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ListMachineLifecyclesRequest) Reset()      { *m = ListMachineLifecyclesRequest{} }
func (*ListMachineLifecyclesRequest) ProtoMessage() {}
func (*ListMachineLifecyclesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_916165098a09e24c, []int{4}
}
func (m *ListMachineLifecyclesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListMachineLifecyclesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListMachineLifecyclesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListMachineLifecyclesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListMachineLifecyclesRequest.Merge(m, src)
}
func (m *ListMachineLifecyclesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListMachineLifecyclesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListMachineLifecyclesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListMachineLifecyclesRequest proto.InternalMessageInfo

func (m *ListMachineLifecyclesRequest) GetFilter() *MachineLifecycleFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (*ListMachineLifecyclesRequest) XXX_MessageName() string {
	return "lcmi.api.machine_lifecycle.v1alpha1.ListMachineLifecyclesRequest"
}

type ListMachineLifecyclesResponse struct {
	MachineLifecycle     []*MachineLifecycle `protobuf:"bytes,1,rep,name=machine_lifecycle,json=machineLifecycle,proto3" json:"machine_lifecycle,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ListMachineLifecyclesResponse) Reset()      { *m = ListMachineLifecyclesResponse{} }
func (*ListMachineLifecyclesResponse) ProtoMessage() {}
func (*ListMachineLifecyclesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_916165098a09e24c, []int{5}
}
func (m *ListMachineLifecyclesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListMachineLifecyclesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListMachineLifecyclesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListMachineLifecyclesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListMachineLifecyclesResponse.Merge(m, src)
}
func (m *ListMachineLifecyclesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListMachineLifecyclesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListMachineLifecyclesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListMachineLifecyclesResponse proto.InternalMessageInfo

func (m *ListMachineLifecyclesResponse) GetMachineLifecycle() []*MachineLifecycle {
	if m != nil {
		return m.MachineLifecycle
	}
	return nil
}

func (*ListMachineLifecyclesResponse) XXX_MessageName() string {
	return "lcmi.api.machine_lifecycle.v1alpha1.ListMachineLifecyclesResponse"
}

type StatusRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatusRequest) Reset()      { *m = StatusRequest{} }
func (*StatusRequest) ProtoMessage() {}
func (*StatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_916165098a09e24c, []int{6}
}
func (m *StatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusRequest.Merge(m, src)
}
func (m *StatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *StatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StatusRequest proto.InternalMessageInfo

func (m *StatusRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (*StatusRequest) XXX_MessageName() string {
	return "lcmi.api.machine_lifecycle.v1alpha1.StatusRequest"
}

type StatusResponse struct {
	Status               *MachineLifecycleStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *StatusResponse) Reset()      { *m = StatusResponse{} }
func (*StatusResponse) ProtoMessage() {}
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_916165098a09e24c, []int{7}
}
func (m *StatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusResponse.Merge(m, src)
}
func (m *StatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *StatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StatusResponse proto.InternalMessageInfo

func (m *StatusResponse) GetStatus() *MachineLifecycleStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (*StatusResponse) XXX_MessageName() string {
	return "lcmi.api.machine_lifecycle.v1alpha1.StatusResponse"
}

type ScanRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScanRequest) Reset()      { *m = ScanRequest{} }
func (*ScanRequest) ProtoMessage() {}
func (*ScanRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_916165098a09e24c, []int{8}
}
func (m *ScanRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScanRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScanRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScanRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScanRequest.Merge(m, src)
}
func (m *ScanRequest) XXX_Size() int {
	return m.Size()
}
func (m *ScanRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ScanRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ScanRequest proto.InternalMessageInfo

func (m *ScanRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (*ScanRequest) XXX_MessageName() string {
	return "lcmi.api.machine_lifecycle.v1alpha1.ScanRequest"
}

type ScanResponse struct {
	Status               *MachineLifecycleStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	State                v1alpha11.ScanState     `protobuf:"varint,2,opt,name=state,proto3,enum=lcmi.api.common.v1alpha1.ScanState" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ScanResponse) Reset()      { *m = ScanResponse{} }
func (*ScanResponse) ProtoMessage() {}
func (*ScanResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_916165098a09e24c, []int{9}
}
func (m *ScanResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScanResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScanResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScanResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScanResponse.Merge(m, src)
}
func (m *ScanResponse) XXX_Size() int {
	return m.Size()
}
func (m *ScanResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ScanResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ScanResponse proto.InternalMessageInfo

func (m *ScanResponse) GetStatus() *MachineLifecycleStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ScanResponse) GetState() v1alpha11.ScanState {
	if m != nil {
		return m.State
	}
	return v1alpha11.ScanState_SCAN_STATE_UNSPECIFIED
}

func (*ScanResponse) XXX_MessageName() string {
	return "lcmi.api.machine_lifecycle.v1alpha1.ScanResponse"
}
func init() {
	proto.RegisterType((*MachineLifecycle)(nil), "lcmi.api.machine_lifecycle.v1alpha1.MachineLifecycle")
	proto.RegisterType((*MachineLifecycleSpec)(nil), "lcmi.api.machine_lifecycle.v1alpha1.MachineLifecycleSpec")
	proto.RegisterType((*MachineLifecycleStatus)(nil), "lcmi.api.machine_lifecycle.v1alpha1.MachineLifecycleStatus")
	proto.RegisterType((*MachineLifecycleFilter)(nil), "lcmi.api.machine_lifecycle.v1alpha1.MachineLifecycleFilter")
	proto.RegisterMapType((map[string]string)(nil), "lcmi.api.machine_lifecycle.v1alpha1.MachineLifecycleFilter.LabelSelectorEntry")
	proto.RegisterType((*ListMachineLifecyclesRequest)(nil), "lcmi.api.machine_lifecycle.v1alpha1.ListMachineLifecyclesRequest")
	proto.RegisterType((*ListMachineLifecyclesResponse)(nil), "lcmi.api.machine_lifecycle.v1alpha1.ListMachineLifecyclesResponse")
	proto.RegisterType((*StatusRequest)(nil), "lcmi.api.machine_lifecycle.v1alpha1.StatusRequest")
	proto.RegisterType((*StatusResponse)(nil), "lcmi.api.machine_lifecycle.v1alpha1.StatusResponse")
	proto.RegisterType((*ScanRequest)(nil), "lcmi.api.machine_lifecycle.v1alpha1.ScanRequest")
	proto.RegisterType((*ScanResponse)(nil), "lcmi.api.machine_lifecycle.v1alpha1.ScanResponse")
}

func init() {
	proto.RegisterFile("lcmi/api/machine_lifecycle/v1alpha1/api.proto", fileDescriptor_916165098a09e24c)
}

var fileDescriptor_916165098a09e24c = []byte{
	// 762 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x96, 0xcf, 0x4f, 0x53, 0x4b,
	0x14, 0xc7, 0x99, 0x16, 0xc8, 0x63, 0x80, 0xbe, 0x32, 0xe1, 0xbd, 0x34, 0x8d, 0x5c, 0xc8, 0x85,
	0x18, 0x17, 0x72, 0x2b, 0x25, 0x26, 0x22, 0x1b, 0x6d, 0xa2, 0xab, 0x16, 0xc9, 0x94, 0xb8, 0xd0,
	0x45, 0x33, 0x9d, 0x9e, 0xc2, 0x95, 0xfb, 0xcb, 0x7b, 0xa7, 0x4d, 0xba, 0xd2, 0xc4, 0xff, 0xc3,
	0xb8, 0x32, 0xfe, 0x29, 0x2c, 0x5d, 0xba, 0xb4, 0x25, 0x26, 0x26, 0x6e, 0x58, 0x1a, 0x57, 0x66,
	0xe6, 0xce, 0x6d, 0x49, 0x29, 0xa4, 0x14, 0xdd, 0x75, 0x4e, 0xcf, 0xf9, 0x9c, 0xef, 0x39, 0x73,
	0xce, 0xe4, 0xe2, 0x4d, 0x87, 0xbb, 0x76, 0x81, 0x05, 0x76, 0xc1, 0x65, 0xfc, 0xc8, 0xf6, 0xa0,
	0xe6, 0xd8, 0x4d, 0xe0, 0x1d, 0xee, 0x40, 0xa1, 0xbd, 0xc5, 0x9c, 0xe0, 0x88, 0x6d, 0xc9, 0xbf,
	0xad, 0x20, 0xf4, 0x85, 0x4f, 0xd6, 0xa5, 0xbb, 0x25, 0xcf, 0x17, 0xdc, 0xad, 0xc4, 0x3d, 0xbf,
	0x36, 0x60, 0x82, 0x60, 0x23, 0x30, 0x79, 0xb3, 0xef, 0xc1, 0x7d, 0xd7, 0xf5, 0xbd, 0x11, 0x3e,
	0xe6, 0x2f, 0x84, 0xb3, 0x95, 0x38, 0x49, 0x39, 0xc9, 0x41, 0x4a, 0xf8, 0x1f, 0xc9, 0x6c, 0x30,
	0xc1, 0x72, 0x68, 0x0d, 0xdd, 0x99, 0x2f, 0xde, 0xb6, 0x06, 0x92, 0x40, 0xb0, 0xbe, 0x0a, 0xeb,
	0x59, 0xfd, 0x15, 0x70, 0x51, 0xd1, 0xde, 0xb4, 0x1f, 0x47, 0x2a, 0x78, 0x3a, 0x0a, 0x80, 0xe7,
	0x52, 0x2a, 0x7e, 0xc7, 0x1a, 0xa3, 0x24, 0x6b, 0x58, 0x48, 0x35, 0x00, 0x4e, 0x15, 0x86, 0x54,
	0xf1, 0x6c, 0x24, 0x98, 0x68, 0x45, 0xb9, 0xb4, 0x02, 0xee, 0x4e, 0x06, 0x54, 0x08, 0xaa, 0x51,
	0xe6, 0x37, 0x84, 0x97, 0x47, 0xe5, 0x24, 0xcf, 0x71, 0x36, 0xa1, 0x8a, 0x4e, 0x00, 0xb5, 0x10,
	0x9a, 0xba, 0x11, 0x77, 0x2f, 0x6b, 0x44, 0xd9, 0xe7, 0xcc, 0x89, 0xbb, 0x41, 0xa1, 0x09, 0x21,
	0x78, 0x1c, 0x68, 0x46, 0x53, 0x0e, 0x3a, 0x01, 0x50, 0x68, 0x92, 0x03, 0xfc, 0xaf, 0xef, 0xd7,
	0x6b, 0x09, 0x5b, 0x62, 0x53, 0x13, 0x60, 0x17, 0x7d, 0xbf, 0xae, 0x75, 0x4b, 0xea, 0x2a, 0x9e,
	0x8f, 0x38, 0xf3, 0x6a, 0x01, 0x84, 0xb6, 0xdf, 0x50, 0x0d, 0x4a, 0x53, 0x2c, 0x4d, 0xfb, 0xca,
	0x62, 0xfe, 0x40, 0xf8, 0xff, 0xd1, 0xad, 0x20, 0x1b, 0x38, 0xe3, 0xb0, 0x48, 0xd4, 0x14, 0x40,
	0xd8, 0x2e, 0xa8, 0x3a, 0xd3, 0x74, 0x41, 0x5a, 0xab, 0x9c, 0x79, 0x07, 0xb6, 0x0b, 0x64, 0x0f,
	0x67, 0x07, 0x5e, 0x21, 0x44, 0x2d, 0x47, 0x28, 0xe1, 0x99, 0xe2, 0xc6, 0x40, 0x78, 0x3c, 0x64,
	0x03, 0xe9, 0x32, 0x9a, 0x2a, 0x5f, 0x9a, 0x49, 0x68, 0xf1, 0x99, 0xbc, 0xc4, 0xc4, 0xf6, 0x22,
	0xc1, 0x1c, 0x07, 0x1a, 0xb5, 0x80, 0xf1, 0x63, 0x76, 0x08, 0xf2, 0x66, 0xd3, 0xd7, 0x6e, 0xc5,
	0x52, 0x9f, 0xb3, 0xaf, 0x31, 0x66, 0x77, 0x44, 0xb5, 0x4f, 0x6d, 0x47, 0x40, 0x48, 0x32, 0x38,
	0x65, 0x37, 0x54, 0x85, 0x73, 0x34, 0x65, 0x37, 0x48, 0x4b, 0x56, 0x5f, 0x07, 0xa7, 0x16, 0x81,
	0x03, 0x5c, 0xf8, 0x61, 0x2e, 0xa5, 0x34, 0xec, 0x4d, 0x34, 0x5d, 0x71, 0x12, 0xab, 0x2c, 0x89,
	0x55, 0x0d, 0x7c, 0xe2, 0x89, 0xb0, 0x43, 0x17, 0x9d, 0xf3, 0xb6, 0xfc, 0x23, 0x4c, 0x2e, 0x3a,
	0x91, 0x2c, 0x4e, 0x1f, 0x43, 0x47, 0xab, 0x93, 0x3f, 0xc9, 0x32, 0x9e, 0x69, 0x33, 0xa7, 0x05,
	0xaa, 0xd7, 0x73, 0x34, 0x3e, 0x3c, 0x4c, 0x3d, 0x40, 0x66, 0x84, 0x6f, 0x95, 0xed, 0x48, 0x0c,
	0x2b, 0x88, 0x28, 0xbc, 0x6e, 0x41, 0x24, 0xe4, 0xba, 0x34, 0x95, 0x1a, 0x3d, 0xb6, 0xbb, 0x37,
	0x28, 0x88, 0x6a, 0x94, 0xf9, 0x0e, 0xe1, 0x95, 0x4b, 0xb2, 0x46, 0x81, 0xef, 0x45, 0x40, 0xea,
	0x78, 0xe9, 0x02, 0x3e, 0x87, 0x54, 0x4b, 0xef, 0x4f, 0xa4, 0x80, 0x26, 0x7b, 0xd8, 0xb7, 0x98,
	0xab, 0x78, 0x51, 0xaf, 0xb1, 0xae, 0x75, 0xe8, 0x52, 0x4d, 0xc0, 0x99, 0xc4, 0x41, 0xcb, 0x1a,
	0x3c, 0x1e, 0xe8, 0xcf, 0x3d, 0x1e, 0x2b, 0x78, 0x3e, 0x9e, 0xe8, 0xd1, 0x2a, 0xde, 0x23, 0xbc,
	0xa0, 0x27, 0xfe, 0xef, 0x89, 0x20, 0x3b, 0x78, 0x46, 0xfe, 0x02, 0xbd, 0x8d, 0xeb, 0x57, 0x6f,
	0xa3, 0x0c, 0x06, 0x1a, 0x47, 0x14, 0x3f, 0xa6, 0xf1, 0xca, 0x30, 0xbd, 0x14, 0xfa, 0xc7, 0x10,
	0x56, 0x21, 0x6c, 0xdb, 0x1c, 0xc8, 0x07, 0x84, 0xff, 0x1b, 0x79, 0xdf, 0xe4, 0xf1, 0x58, 0xda,
	0xaf, 0x9a, 0xd0, 0x7c, 0xe9, 0x26, 0x88, 0xb8, 0xa5, 0xe6, 0x14, 0x71, 0xf1, 0xb4, 0x2c, 0x8c,
	0xdc, 0x1b, 0x8b, 0x76, 0xee, 0xbe, 0xf2, 0x5b, 0xd7, 0x88, 0xe8, 0xa7, 0x8b, 0xf0, 0xac, 0x7e,
	0x37, 0x8b, 0xe3, 0x85, 0x9f, 0x1f, 0xd4, 0xfc, 0xf6, 0xb5, 0x62, 0x92, 0xa4, 0xa5, 0x37, 0x5f,
	0xba, 0xc6, 0xd4, 0x59, 0xd7, 0x40, 0x3f, 0xbb, 0x06, 0x7a, 0xdb, 0x33, 0xd0, 0xa7, 0x9e, 0x81,
	0x4e, 0x7a, 0x06, 0xfa, 0xdc, 0x33, 0xd0, 0xd7, 0x9e, 0x81, 0xbe, 0xf7, 0x8c, 0xa9, 0x33, 0x69,
	0x3f, 0x35, 0xd0, 0xc9, 0xa9, 0x81, 0x5e, 0x54, 0x0e, 0x6d, 0x71, 0xd4, 0xaa, 0xcb, 0x19, 0x28,
	0xd8, 0xa1, 0xef, 0x71, 0x3f, 0x84, 0xcd, 0x06, 0xb4, 0x0b, 0xfd, 0x74, 0x9b, 0x2e, 0xf3, 0xd8,
	0x21, 0x84, 0x85, 0x31, 0x3e, 0x4c, 0xea, 0xb3, 0xea, 0x53, 0x61, 0xfb, 0x77, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xe1, 0x98, 0x41, 0xe1, 0xc6, 0x08, 0x00, 0x00,
}

func (this *MachineLifecycle) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*MachineLifecycle)
	if !ok {
		that2, ok := that.(MachineLifecycle)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if c := this.Metadata.Compare(that1.Metadata); c != 0 {
		return c
	}
	if c := this.Spec.Compare(that1.Spec); c != 0 {
		return c
	}
	if c := this.Status.Compare(that1.Status); c != 0 {
		return c
	}
	if c := bytes.Compare(this.XXX_unrecognized, that1.XXX_unrecognized); c != 0 {
		return c
	}
	return 0
}
func (this *MachineLifecycleSpec) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*MachineLifecycleSpec)
	if !ok {
		that2, ok := that.(MachineLifecycleSpec)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if c := this.MachineTypeRef.Compare(that1.MachineTypeRef); c != 0 {
		return c
	}
	if c := this.OobMachineRef.Compare(that1.OobMachineRef); c != 0 {
		return c
	}
	if this.ScanPeriod != that1.ScanPeriod {
		if this.ScanPeriod < that1.ScanPeriod {
			return -1
		}
		return 1
	}
	if c := bytes.Compare(this.XXX_unrecognized, that1.XXX_unrecognized); c != 0 {
		return c
	}
	return 0
}
func (this *MachineLifecycleStatus) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*MachineLifecycleStatus)
	if !ok {
		that2, ok := that.(MachineLifecycleStatus)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if this.LastScanTime != that1.LastScanTime {
		if this.LastScanTime < that1.LastScanTime {
			return -1
		}
		return 1
	}
	if this.LastScanResult != that1.LastScanResult {
		if this.LastScanResult < that1.LastScanResult {
			return -1
		}
		return 1
	}
	if len(this.InstalledPackages) != len(that1.InstalledPackages) {
		if len(this.InstalledPackages) < len(that1.InstalledPackages) {
			return -1
		}
		return 1
	}
	for i := range this.InstalledPackages {
		if c := this.InstalledPackages[i].Compare(that1.InstalledPackages[i]); c != 0 {
			return c
		}
	}
	if c := bytes.Compare(this.XXX_unrecognized, that1.XXX_unrecognized); c != 0 {
		return c
	}
	return 0
}
func (this *MachineLifecycleFilter) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*MachineLifecycleFilter)
	if !ok {
		that2, ok := that.(MachineLifecycleFilter)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if this.Id != that1.Id {
		if this.Id < that1.Id {
			return -1
		}
		return 1
	}
	if len(this.LabelSelector) != len(that1.LabelSelector) {
		if len(this.LabelSelector) < len(that1.LabelSelector) {
			return -1
		}
		return 1
	}
	for i := range this.LabelSelector {
		if this.LabelSelector[i] != that1.LabelSelector[i] {
			if this.LabelSelector[i] < that1.LabelSelector[i] {
				return -1
			}
			return 1
		}
	}
	if c := bytes.Compare(this.XXX_unrecognized, that1.XXX_unrecognized); c != 0 {
		return c
	}
	return 0
}
func (this *ListMachineLifecyclesRequest) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*ListMachineLifecyclesRequest)
	if !ok {
		that2, ok := that.(ListMachineLifecyclesRequest)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if c := this.Filter.Compare(that1.Filter); c != 0 {
		return c
	}
	if c := bytes.Compare(this.XXX_unrecognized, that1.XXX_unrecognized); c != 0 {
		return c
	}
	return 0
}
func (this *ListMachineLifecyclesResponse) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*ListMachineLifecyclesResponse)
	if !ok {
		that2, ok := that.(ListMachineLifecyclesResponse)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if len(this.MachineLifecycle) != len(that1.MachineLifecycle) {
		if len(this.MachineLifecycle) < len(that1.MachineLifecycle) {
			return -1
		}
		return 1
	}
	for i := range this.MachineLifecycle {
		if c := this.MachineLifecycle[i].Compare(that1.MachineLifecycle[i]); c != 0 {
			return c
		}
	}
	if c := bytes.Compare(this.XXX_unrecognized, that1.XXX_unrecognized); c != 0 {
		return c
	}
	return 0
}
func (this *StatusRequest) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*StatusRequest)
	if !ok {
		that2, ok := that.(StatusRequest)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if this.Id != that1.Id {
		if this.Id < that1.Id {
			return -1
		}
		return 1
	}
	if c := bytes.Compare(this.XXX_unrecognized, that1.XXX_unrecognized); c != 0 {
		return c
	}
	return 0
}
func (this *StatusResponse) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*StatusResponse)
	if !ok {
		that2, ok := that.(StatusResponse)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if c := this.Status.Compare(that1.Status); c != 0 {
		return c
	}
	if c := bytes.Compare(this.XXX_unrecognized, that1.XXX_unrecognized); c != 0 {
		return c
	}
	return 0
}
func (this *ScanRequest) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*ScanRequest)
	if !ok {
		that2, ok := that.(ScanRequest)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if this.Id != that1.Id {
		if this.Id < that1.Id {
			return -1
		}
		return 1
	}
	if c := bytes.Compare(this.XXX_unrecognized, that1.XXX_unrecognized); c != 0 {
		return c
	}
	return 0
}
func (this *ScanResponse) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*ScanResponse)
	if !ok {
		that2, ok := that.(ScanResponse)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if c := this.Status.Compare(that1.Status); c != 0 {
		return c
	}
	if this.State != that1.State {
		if this.State < that1.State {
			return -1
		}
		return 1
	}
	if c := bytes.Compare(this.XXX_unrecognized, that1.XXX_unrecognized); c != 0 {
		return c
	}
	return 0
}
func (this *MachineLifecycle) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MachineLifecycle)
	if !ok {
		that2, ok := that.(MachineLifecycle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *MachineLifecycleSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MachineLifecycleSpec)
	if !ok {
		that2, ok := that.(MachineLifecycleSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MachineTypeRef.Equal(that1.MachineTypeRef) {
		return false
	}
	if !this.OobMachineRef.Equal(that1.OobMachineRef) {
		return false
	}
	if this.ScanPeriod != that1.ScanPeriod {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *MachineLifecycleStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MachineLifecycleStatus)
	if !ok {
		that2, ok := that.(MachineLifecycleStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LastScanTime != that1.LastScanTime {
		return false
	}
	if this.LastScanResult != that1.LastScanResult {
		return false
	}
	if len(this.InstalledPackages) != len(that1.InstalledPackages) {
		return false
	}
	for i := range this.InstalledPackages {
		if !this.InstalledPackages[i].Equal(that1.InstalledPackages[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *MachineLifecycleFilter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MachineLifecycleFilter)
	if !ok {
		that2, ok := that.(MachineLifecycleFilter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if len(this.LabelSelector) != len(that1.LabelSelector) {
		return false
	}
	for i := range this.LabelSelector {
		if this.LabelSelector[i] != that1.LabelSelector[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ListMachineLifecyclesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListMachineLifecyclesRequest)
	if !ok {
		that2, ok := that.(ListMachineLifecyclesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Filter.Equal(that1.Filter) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ListMachineLifecyclesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListMachineLifecyclesResponse)
	if !ok {
		that2, ok := that.(ListMachineLifecyclesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.MachineLifecycle) != len(that1.MachineLifecycle) {
		return false
	}
	for i := range this.MachineLifecycle {
		if !this.MachineLifecycle[i].Equal(that1.MachineLifecycle[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *StatusRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StatusRequest)
	if !ok {
		that2, ok := that.(StatusRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *StatusResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StatusResponse)
	if !ok {
		that2, ok := that.(StatusResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ScanRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ScanRequest)
	if !ok {
		that2, ok := that.(ScanRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ScanResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ScanResponse)
	if !ok {
		that2, ok := that.(ScanResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *MachineLifecycle) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&v1alpha1.MachineLifecycle{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MachineLifecycleSpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&v1alpha1.MachineLifecycleSpec{")
	if this.MachineTypeRef != nil {
		s = append(s, "MachineTypeRef: "+fmt.Sprintf("%#v", this.MachineTypeRef)+",\n")
	}
	if this.OobMachineRef != nil {
		s = append(s, "OobMachineRef: "+fmt.Sprintf("%#v", this.OobMachineRef)+",\n")
	}
	s = append(s, "ScanPeriod: "+fmt.Sprintf("%#v", this.ScanPeriod)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MachineLifecycleStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&v1alpha1.MachineLifecycleStatus{")
	s = append(s, "LastScanTime: "+fmt.Sprintf("%#v", this.LastScanTime)+",\n")
	s = append(s, "LastScanResult: "+fmt.Sprintf("%#v", this.LastScanResult)+",\n")
	if this.InstalledPackages != nil {
		s = append(s, "InstalledPackages: "+fmt.Sprintf("%#v", this.InstalledPackages)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MachineLifecycleFilter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&v1alpha1.MachineLifecycleFilter{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	keysForLabelSelector := make([]string, 0, len(this.LabelSelector))
	for k, _ := range this.LabelSelector {
		keysForLabelSelector = append(keysForLabelSelector, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabelSelector)
	mapStringForLabelSelector := "map[string]string{"
	for _, k := range keysForLabelSelector {
		mapStringForLabelSelector += fmt.Sprintf("%#v: %#v,", k, this.LabelSelector[k])
	}
	mapStringForLabelSelector += "}"
	if this.LabelSelector != nil {
		s = append(s, "LabelSelector: "+mapStringForLabelSelector+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListMachineLifecyclesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&v1alpha1.ListMachineLifecyclesRequest{")
	if this.Filter != nil {
		s = append(s, "Filter: "+fmt.Sprintf("%#v", this.Filter)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListMachineLifecyclesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&v1alpha1.ListMachineLifecyclesResponse{")
	if this.MachineLifecycle != nil {
		s = append(s, "MachineLifecycle: "+fmt.Sprintf("%#v", this.MachineLifecycle)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StatusRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&v1alpha1.StatusRequest{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StatusResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&v1alpha1.StatusResponse{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ScanRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&v1alpha1.ScanRequest{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ScanResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&v1alpha1.ScanResponse{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringApi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MachineLifecycleBrokerServiceClient is the client API for MachineLifecycleBrokerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MachineLifecycleBrokerServiceClient interface {
	ListMachineLifecycles(ctx context.Context, in *ListMachineLifecyclesRequest, opts ...grpc.CallOption) (*ListMachineLifecyclesResponse, error)
	Scan(ctx context.Context, in *ScanRequest, opts ...grpc.CallOption) (*ScanResponse, error)
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type machineLifecycleBrokerServiceClient struct {
	cc *grpc.ClientConn
}

func NewMachineLifecycleBrokerServiceClient(cc *grpc.ClientConn) MachineLifecycleBrokerServiceClient {
	return &machineLifecycleBrokerServiceClient{cc}
}

func (c *machineLifecycleBrokerServiceClient) ListMachineLifecycles(ctx context.Context, in *ListMachineLifecyclesRequest, opts ...grpc.CallOption) (*ListMachineLifecyclesResponse, error) {
	out := new(ListMachineLifecyclesResponse)
	err := c.cc.Invoke(ctx, "/lcmi.api.machine_lifecycle.v1alpha1.MachineLifecycleBrokerService/ListMachineLifecycles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineLifecycleBrokerServiceClient) Scan(ctx context.Context, in *ScanRequest, opts ...grpc.CallOption) (*ScanResponse, error) {
	out := new(ScanResponse)
	err := c.cc.Invoke(ctx, "/lcmi.api.machine_lifecycle.v1alpha1.MachineLifecycleBrokerService/Scan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineLifecycleBrokerServiceClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/lcmi.api.machine_lifecycle.v1alpha1.MachineLifecycleBrokerService/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MachineLifecycleBrokerServiceServer is the server API for MachineLifecycleBrokerService service.
type MachineLifecycleBrokerServiceServer interface {
	ListMachineLifecycles(context.Context, *ListMachineLifecyclesRequest) (*ListMachineLifecyclesResponse, error)
	Scan(context.Context, *ScanRequest) (*ScanResponse, error)
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
}

// UnimplementedMachineLifecycleBrokerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMachineLifecycleBrokerServiceServer struct {
}

func (*UnimplementedMachineLifecycleBrokerServiceServer) ListMachineLifecycles(ctx context.Context, req *ListMachineLifecyclesRequest) (*ListMachineLifecyclesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMachineLifecycles not implemented")
}
func (*UnimplementedMachineLifecycleBrokerServiceServer) Scan(ctx context.Context, req *ScanRequest) (*ScanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Scan not implemented")
}
func (*UnimplementedMachineLifecycleBrokerServiceServer) Status(ctx context.Context, req *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}

func RegisterMachineLifecycleBrokerServiceServer(s *grpc.Server, srv MachineLifecycleBrokerServiceServer) {
	s.RegisterService(&_MachineLifecycleBrokerService_serviceDesc, srv)
}

func _MachineLifecycleBrokerService_ListMachineLifecycles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMachineLifecyclesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineLifecycleBrokerServiceServer).ListMachineLifecycles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lcmi.api.machine_lifecycle.v1alpha1.MachineLifecycleBrokerService/ListMachineLifecycles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineLifecycleBrokerServiceServer).ListMachineLifecycles(ctx, req.(*ListMachineLifecyclesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineLifecycleBrokerService_Scan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineLifecycleBrokerServiceServer).Scan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lcmi.api.machine_lifecycle.v1alpha1.MachineLifecycleBrokerService/Scan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineLifecycleBrokerServiceServer).Scan(ctx, req.(*ScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineLifecycleBrokerService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineLifecycleBrokerServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lcmi.api.machine_lifecycle.v1alpha1.MachineLifecycleBrokerService/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineLifecycleBrokerServiceServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MachineLifecycleBrokerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lcmi.api.machine_lifecycle.v1alpha1.MachineLifecycleBrokerService",
	HandlerType: (*MachineLifecycleBrokerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListMachineLifecycles",
			Handler:    _MachineLifecycleBrokerService_ListMachineLifecycles_Handler,
		},
		{
			MethodName: "Scan",
			Handler:    _MachineLifecycleBrokerService_Scan_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _MachineLifecycleBrokerService_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lcmi/api/machine_lifecycle/v1alpha1/api.proto",
}

func (m *MachineLifecycle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MachineLifecycle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MachineLifecycle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MachineLifecycleSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MachineLifecycleSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MachineLifecycleSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ScanPeriod != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ScanPeriod))
		i--
		dAtA[i] = 0x18
	}
	if m.OobMachineRef != nil {
		{
			size, err := m.OobMachineRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.MachineTypeRef != nil {
		{
			size, err := m.MachineTypeRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MachineLifecycleStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MachineLifecycleStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MachineLifecycleStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.InstalledPackages) > 0 {
		for iNdEx := len(m.InstalledPackages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InstalledPackages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.LastScanResult != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LastScanResult))
		i--
		dAtA[i] = 0x10
	}
	if m.LastScanTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LastScanTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MachineLifecycleFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MachineLifecycleFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MachineLifecycleFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LabelSelector) > 0 {
		for k := range m.LabelSelector {
			v := m.LabelSelector[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintApi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListMachineLifecyclesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListMachineLifecyclesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListMachineLifecyclesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Filter != nil {
		{
			size, err := m.Filter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListMachineLifecyclesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListMachineLifecyclesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListMachineLifecyclesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MachineLifecycle) > 0 {
		for iNdEx := len(m.MachineLifecycle) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MachineLifecycle[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *StatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ScanRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScanRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScanRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ScanResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScanResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScanResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedMachineLifecycle(r randyApi, easy bool) *MachineLifecycle {
	this := &MachineLifecycle{}
	if r.Intn(5) != 0 {
		this.Metadata = v1alpha1.NewPopulatedObjectMetadata(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Spec = NewPopulatedMachineLifecycleSpec(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Status = NewPopulatedMachineLifecycleStatus(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedApi(r, 4)
	}
	return this
}

func NewPopulatedMachineLifecycleSpec(r randyApi, easy bool) *MachineLifecycleSpec {
	this := &MachineLifecycleSpec{}
	if r.Intn(5) != 0 {
		this.MachineTypeRef = v1alpha1.NewPopulatedLocalObjectReference(r, easy)
	}
	if r.Intn(5) != 0 {
		this.OobMachineRef = v1alpha1.NewPopulatedLocalObjectReference(r, easy)
	}
	this.ScanPeriod = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.ScanPeriod *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedApi(r, 4)
	}
	return this
}

func NewPopulatedMachineLifecycleStatus(r randyApi, easy bool) *MachineLifecycleStatus {
	this := &MachineLifecycleStatus{}
	this.LastScanTime = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.LastScanTime *= -1
	}
	this.LastScanResult = v1alpha11.ScanResult([]int32{0, 1, 2}[r.Intn(3)])
	if r.Intn(5) != 0 {
		v1 := r.Intn(5)
		this.InstalledPackages = make([]*v1alpha1.LocalObjectReference, v1)
		for i := 0; i < v1; i++ {
			this.InstalledPackages[i] = v1alpha1.NewPopulatedLocalObjectReference(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedApi(r, 4)
	}
	return this
}

func NewPopulatedMachineLifecycleFilter(r randyApi, easy bool) *MachineLifecycleFilter {
	this := &MachineLifecycleFilter{}
	this.Id = string(randStringApi(r))
	if r.Intn(5) != 0 {
		v2 := r.Intn(10)
		this.LabelSelector = make(map[string]string)
		for i := 0; i < v2; i++ {
			this.LabelSelector[randStringApi(r)] = randStringApi(r)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedApi(r, 3)
	}
	return this
}

func NewPopulatedListMachineLifecyclesRequest(r randyApi, easy bool) *ListMachineLifecyclesRequest {
	this := &ListMachineLifecyclesRequest{}
	if r.Intn(5) != 0 {
		this.Filter = NewPopulatedMachineLifecycleFilter(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedApi(r, 2)
	}
	return this
}

func NewPopulatedListMachineLifecyclesResponse(r randyApi, easy bool) *ListMachineLifecyclesResponse {
	this := &ListMachineLifecyclesResponse{}
	if r.Intn(5) != 0 {
		v3 := r.Intn(5)
		this.MachineLifecycle = make([]*MachineLifecycle, v3)
		for i := 0; i < v3; i++ {
			this.MachineLifecycle[i] = NewPopulatedMachineLifecycle(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedApi(r, 2)
	}
	return this
}

func NewPopulatedStatusRequest(r randyApi, easy bool) *StatusRequest {
	this := &StatusRequest{}
	this.Id = string(randStringApi(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedApi(r, 2)
	}
	return this
}

func NewPopulatedStatusResponse(r randyApi, easy bool) *StatusResponse {
	this := &StatusResponse{}
	if r.Intn(5) != 0 {
		this.Status = NewPopulatedMachineLifecycleStatus(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedApi(r, 2)
	}
	return this
}

func NewPopulatedScanRequest(r randyApi, easy bool) *ScanRequest {
	this := &ScanRequest{}
	this.Id = string(randStringApi(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedApi(r, 2)
	}
	return this
}

func NewPopulatedScanResponse(r randyApi, easy bool) *ScanResponse {
	this := &ScanResponse{}
	if r.Intn(5) != 0 {
		this.Status = NewPopulatedMachineLifecycleStatus(r, easy)
	}
	this.State = v1alpha11.ScanState([]int32{0, 1, 2}[r.Intn(3)])
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedApi(r, 3)
	}
	return this
}

type randyApi interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneApi(r randyApi) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringApi(r randyApi) string {
	v4 := r.Intn(100)
	tmps := make([]rune, v4)
	for i := 0; i < v4; i++ {
		tmps[i] = randUTF8RuneApi(r)
	}
	return string(tmps)
}
func randUnrecognizedApi(r randyApi, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldApi(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldApi(dAtA []byte, r randyApi, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateApi(dAtA, uint64(key))
		v5 := r.Int63()
		if r.Intn(2) == 0 {
			v5 *= -1
		}
		dAtA = encodeVarintPopulateApi(dAtA, uint64(v5))
	case 1:
		dAtA = encodeVarintPopulateApi(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateApi(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateApi(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateApi(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateApi(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *MachineLifecycle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MachineLifecycleSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MachineTypeRef != nil {
		l = m.MachineTypeRef.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.OobMachineRef != nil {
		l = m.OobMachineRef.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ScanPeriod != 0 {
		n += 1 + sovApi(uint64(m.ScanPeriod))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MachineLifecycleStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastScanTime != 0 {
		n += 1 + sovApi(uint64(m.LastScanTime))
	}
	if m.LastScanResult != 0 {
		n += 1 + sovApi(uint64(m.LastScanResult))
	}
	if len(m.InstalledPackages) > 0 {
		for _, e := range m.InstalledPackages {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MachineLifecycleFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.LabelSelector) > 0 {
		for k, v := range m.LabelSelector {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + len(v) + sovApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListMachineLifecyclesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListMachineLifecyclesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MachineLifecycle) > 0 {
		for _, e := range m.MachineLifecycle {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ScanRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ScanResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *MachineLifecycle) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MachineLifecycle{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "ObjectMetadata", "v1alpha1.ObjectMetadata", 1) + `,`,
		`Spec:` + strings.Replace(this.Spec.String(), "MachineLifecycleSpec", "MachineLifecycleSpec", 1) + `,`,
		`Status:` + strings.Replace(this.Status.String(), "MachineLifecycleStatus", "MachineLifecycleStatus", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MachineLifecycleSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MachineLifecycleSpec{`,
		`MachineTypeRef:` + strings.Replace(fmt.Sprintf("%v", this.MachineTypeRef), "LocalObjectReference", "v1alpha1.LocalObjectReference", 1) + `,`,
		`OobMachineRef:` + strings.Replace(fmt.Sprintf("%v", this.OobMachineRef), "LocalObjectReference", "v1alpha1.LocalObjectReference", 1) + `,`,
		`ScanPeriod:` + fmt.Sprintf("%v", this.ScanPeriod) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MachineLifecycleStatus) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForInstalledPackages := "[]*LocalObjectReference{"
	for _, f := range this.InstalledPackages {
		repeatedStringForInstalledPackages += strings.Replace(fmt.Sprintf("%v", f), "LocalObjectReference", "v1alpha1.LocalObjectReference", 1) + ","
	}
	repeatedStringForInstalledPackages += "}"
	s := strings.Join([]string{`&MachineLifecycleStatus{`,
		`LastScanTime:` + fmt.Sprintf("%v", this.LastScanTime) + `,`,
		`LastScanResult:` + fmt.Sprintf("%v", this.LastScanResult) + `,`,
		`InstalledPackages:` + repeatedStringForInstalledPackages + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MachineLifecycleFilter) String() string {
	if this == nil {
		return "nil"
	}
	keysForLabelSelector := make([]string, 0, len(this.LabelSelector))
	for k, _ := range this.LabelSelector {
		keysForLabelSelector = append(keysForLabelSelector, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabelSelector)
	mapStringForLabelSelector := "map[string]string{"
	for _, k := range keysForLabelSelector {
		mapStringForLabelSelector += fmt.Sprintf("%v: %v,", k, this.LabelSelector[k])
	}
	mapStringForLabelSelector += "}"
	s := strings.Join([]string{`&MachineLifecycleFilter{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`LabelSelector:` + mapStringForLabelSelector + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListMachineLifecyclesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListMachineLifecyclesRequest{`,
		`Filter:` + strings.Replace(this.Filter.String(), "MachineLifecycleFilter", "MachineLifecycleFilter", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListMachineLifecyclesResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMachineLifecycle := "[]*MachineLifecycle{"
	for _, f := range this.MachineLifecycle {
		repeatedStringForMachineLifecycle += strings.Replace(f.String(), "MachineLifecycle", "MachineLifecycle", 1) + ","
	}
	repeatedStringForMachineLifecycle += "}"
	s := strings.Join([]string{`&ListMachineLifecyclesResponse{`,
		`MachineLifecycle:` + repeatedStringForMachineLifecycle + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StatusRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StatusRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StatusResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StatusResponse{`,
		`Status:` + strings.Replace(this.Status.String(), "MachineLifecycleStatus", "MachineLifecycleStatus", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScanRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScanRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScanResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScanResponse{`,
		`Status:` + strings.Replace(this.Status.String(), "MachineLifecycleStatus", "MachineLifecycleStatus", 1) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringApi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *MachineLifecycle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MachineLifecycle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MachineLifecycle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &v1alpha1.ObjectMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &MachineLifecycleSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &MachineLifecycleStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MachineLifecycleSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MachineLifecycleSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MachineLifecycleSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineTypeRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MachineTypeRef == nil {
				m.MachineTypeRef = &v1alpha1.LocalObjectReference{}
			}
			if err := m.MachineTypeRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OobMachineRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OobMachineRef == nil {
				m.OobMachineRef = &v1alpha1.LocalObjectReference{}
			}
			if err := m.OobMachineRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScanPeriod", wireType)
			}
			m.ScanPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScanPeriod |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MachineLifecycleStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MachineLifecycleStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MachineLifecycleStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastScanTime", wireType)
			}
			m.LastScanTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastScanTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastScanResult", wireType)
			}
			m.LastScanResult = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastScanResult |= v1alpha11.ScanResult(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstalledPackages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstalledPackages = append(m.InstalledPackages, &v1alpha1.LocalObjectReference{})
			if err := m.InstalledPackages[len(m.InstalledPackages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MachineLifecycleFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MachineLifecycleFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MachineLifecycleFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LabelSelector == nil {
				m.LabelSelector = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.LabelSelector[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListMachineLifecyclesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListMachineLifecyclesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListMachineLifecyclesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &MachineLifecycleFilter{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListMachineLifecyclesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListMachineLifecyclesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListMachineLifecyclesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineLifecycle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MachineLifecycle = append(m.MachineLifecycle, &MachineLifecycle{})
			if err := m.MachineLifecycle[len(m.MachineLifecycle)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &MachineLifecycleStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScanRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScanRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScanRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScanResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScanResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScanResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &MachineLifecycleStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= v1alpha11.ScanState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
