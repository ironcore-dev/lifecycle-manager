// SPDX-FileCopyrightText: 2023 SAP SE or an SAP affiliate company and IronCore contributors
// SPDX-License-Identifier: Apache-2.0
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package applyconfiguration

import (
	v1alpha1 "github.com/ironcore-dev/lifecycle-manager/api/lifecycle/v1alpha1"
	lifecyclev1alpha1 "github.com/ironcore-dev/lifecycle-manager/clientgo/applyconfiguration/lifecycle/v1alpha1"
	metav1 "github.com/ironcore-dev/lifecycle-manager/clientgo/applyconfiguration/meta/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
)

// ForKind returns an apply configuration type for the given GroupVersionKind, or nil if no
// apply configuration type exists for the given GroupVersionKind.
func ForKind(kind schema.GroupVersionKind) interface{} {
	switch kind {
	// Group=lifecycle.ironcore.dev, Version=v1alpha1
	case v1alpha1.SchemeGroupVersion.WithKind("AvailablePackageVersions"):
		return &lifecyclev1alpha1.AvailablePackageVersionsApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("Machine"):
		return &lifecyclev1alpha1.MachineApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("MachineGroup"):
		return &lifecyclev1alpha1.MachineGroupApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("MachineSpec"):
		return &lifecyclev1alpha1.MachineSpecApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("MachineStatus"):
		return &lifecyclev1alpha1.MachineStatusApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("MachineType"):
		return &lifecyclev1alpha1.MachineTypeApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("MachineTypeSpec"):
		return &lifecyclev1alpha1.MachineTypeSpecApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("MachineTypeStatus"):
		return &lifecyclev1alpha1.MachineTypeStatusApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("PackageVersion"):
		return &lifecyclev1alpha1.PackageVersionApplyConfiguration{}

		// Group=meta.k8s.io, Version=v1
	case v1.SchemeGroupVersion.WithKind("LabelSelector"):
		return &metav1.LabelSelectorApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("LabelSelectorRequirement"):
		return &metav1.LabelSelectorRequirementApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ManagedFieldsEntry"):
		return &metav1.ManagedFieldsEntryApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ObjectMeta"):
		return &metav1.ObjectMetaApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("OwnerReference"):
		return &metav1.OwnerReferenceApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("TypeMeta"):
		return &metav1.TypeMetaApplyConfiguration{}

	}
	return nil
}
