// SPDX-FileCopyrightText: 2023 SAP SE or an SAP affiliate company and IronCore contributors
// SPDX-License-Identifier: Apache-2.0
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/ironcore-dev/lifecycle-manager/api/lifecycle/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// MachineTypeStatusApplyConfiguration represents an declarative configuration of the MachineTypeStatus type for use
// with apply.
type MachineTypeStatusApplyConfiguration struct {
	LastScanTime      *v1.Time                                     `json:"lastScanTime,omitempty"`
	LastScanResult    *v1alpha1.ScanResult                         `json:"lastScanResult,omitempty"`
	AvailablePackages []AvailablePackageVersionsApplyConfiguration `json:"availablePackages,omitempty"`
	Message           *string                                      `json:"message,omitempty"`
}

// MachineTypeStatusApplyConfiguration constructs an declarative configuration of the MachineTypeStatus type for use with
// apply.
func MachineTypeStatus() *MachineTypeStatusApplyConfiguration {
	return &MachineTypeStatusApplyConfiguration{}
}

// WithLastScanTime sets the LastScanTime field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastScanTime field is set to the value of the last call.
func (b *MachineTypeStatusApplyConfiguration) WithLastScanTime(value v1.Time) *MachineTypeStatusApplyConfiguration {
	b.LastScanTime = &value
	return b
}

// WithLastScanResult sets the LastScanResult field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastScanResult field is set to the value of the last call.
func (b *MachineTypeStatusApplyConfiguration) WithLastScanResult(value v1alpha1.ScanResult) *MachineTypeStatusApplyConfiguration {
	b.LastScanResult = &value
	return b
}

// WithAvailablePackages adds the given value to the AvailablePackages field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the AvailablePackages field.
func (b *MachineTypeStatusApplyConfiguration) WithAvailablePackages(values ...*AvailablePackageVersionsApplyConfiguration) *MachineTypeStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithAvailablePackages")
		}
		b.AvailablePackages = append(b.AvailablePackages, *values[i])
	}
	return b
}

// WithMessage sets the Message field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Message field is set to the value of the last call.
func (b *MachineTypeStatusApplyConfiguration) WithMessage(value string) *MachineTypeStatusApplyConfiguration {
	b.Message = &value
	return b
}
