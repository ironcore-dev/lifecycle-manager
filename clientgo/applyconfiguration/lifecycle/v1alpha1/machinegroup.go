// SPDX-FileCopyrightText: 2023 SAP SE or an SAP affiliate company and IronCore contributors
// SPDX-License-Identifier: Apache-2.0
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "github.com/ironcore-dev/lifecycle-manager/clientgo/applyconfiguration/meta/v1"
)

// MachineGroupApplyConfiguration represents an declarative configuration of the MachineGroup type for use
// with apply.
type MachineGroupApplyConfiguration struct {
	Name            *string                             `json:"name,omitempty"`
	MachineSelector *v1.LabelSelectorApplyConfiguration `json:"machineSelector,omitempty"`
	Packages        []PackageVersionApplyConfiguration  `json:"packages,omitempty"`
}

// MachineGroupApplyConfiguration constructs an declarative configuration of the MachineGroup type for use with
// apply.
func MachineGroup() *MachineGroupApplyConfiguration {
	return &MachineGroupApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *MachineGroupApplyConfiguration) WithName(value string) *MachineGroupApplyConfiguration {
	b.Name = &value
	return b
}

// WithMachineSelector sets the MachineSelector field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MachineSelector field is set to the value of the last call.
func (b *MachineGroupApplyConfiguration) WithMachineSelector(value *v1.LabelSelectorApplyConfiguration) *MachineGroupApplyConfiguration {
	b.MachineSelector = value
	return b
}

// WithPackages adds the given value to the Packages field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Packages field.
func (b *MachineGroupApplyConfiguration) WithPackages(values ...*PackageVersionApplyConfiguration) *MachineGroupApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithPackages")
		}
		b.Packages = append(b.Packages, *values[i])
	}
	return b
}
