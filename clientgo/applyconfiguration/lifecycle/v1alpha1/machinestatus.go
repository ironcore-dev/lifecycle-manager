// SPDX-FileCopyrightText: 2023 SAP SE or an SAP affiliate company and IronCore contributors
// SPDX-License-Identifier: Apache-2.0
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/ironcore-dev/lifecycle-manager/api/lifecycle/v1alpha1"
	metav1 "github.com/ironcore-dev/lifecycle-manager/clientgo/applyconfiguration/meta/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// MachineStatusApplyConfiguration represents an declarative configuration of the MachineStatus type for use
// with apply.
type MachineStatusApplyConfiguration struct {
	LastScanTime      *v1.Time                             `json:"lastScanTime,omitempty"`
	LastScanResult    *v1alpha1.ScanResult                 `json:"lastScanResult,omitempty"`
	InstalledPackages []PackageVersionApplyConfiguration   `json:"installedPackages,omitempty"`
	Message           *string                              `json:"message,omitempty"`
	Conditions        []metav1.ConditionApplyConfiguration `json:"conditions,omitempty"`
}

// MachineStatusApplyConfiguration constructs an declarative configuration of the MachineStatus type for use with
// apply.
func MachineStatus() *MachineStatusApplyConfiguration {
	return &MachineStatusApplyConfiguration{}
}

// WithLastScanTime sets the LastScanTime field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastScanTime field is set to the value of the last call.
func (b *MachineStatusApplyConfiguration) WithLastScanTime(value v1.Time) *MachineStatusApplyConfiguration {
	b.LastScanTime = &value
	return b
}

// WithLastScanResult sets the LastScanResult field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastScanResult field is set to the value of the last call.
func (b *MachineStatusApplyConfiguration) WithLastScanResult(value v1alpha1.ScanResult) *MachineStatusApplyConfiguration {
	b.LastScanResult = &value
	return b
}

// WithInstalledPackages adds the given value to the InstalledPackages field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the InstalledPackages field.
func (b *MachineStatusApplyConfiguration) WithInstalledPackages(values ...*PackageVersionApplyConfiguration) *MachineStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithInstalledPackages")
		}
		b.InstalledPackages = append(b.InstalledPackages, *values[i])
	}
	return b
}

// WithMessage sets the Message field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Message field is set to the value of the last call.
func (b *MachineStatusApplyConfiguration) WithMessage(value string) *MachineStatusApplyConfiguration {
	b.Message = &value
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *MachineStatusApplyConfiguration) WithConditions(values ...*metav1.ConditionApplyConfiguration) *MachineStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}
